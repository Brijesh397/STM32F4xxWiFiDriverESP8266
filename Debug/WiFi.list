
WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee8  08005ee8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          000007c4  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000870  20000870  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e2fa  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002761  00000000  00000000  0002e419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b88  00000000  00000000  00030b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008ba  00000000  00000000  00031708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000227b0  00000000  00000000  00031fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fb8a  00000000  00000000  00054772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb5c2  00000000  00000000  000642fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003428  00000000  00000000  0012f8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00132ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800557c 	.word	0x0800557c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	0800557c 	.word	0x0800557c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <circularBufferIsFull>:
 *
 * RETURN		:	uint8_t
 *
 * **************************************************************************/
uint8_t circularBufferIsFull(Circular_Buffer_t *buffer)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(buffer->front == buffer->rear + 1 && buffer->rear == BUFFER_SIZE - 1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000590:	3301      	adds	r3, #1
 8000592:	429a      	cmp	r2, r3
 8000594:	d108      	bne.n	80005a8 <circularBufferIsFull+0x2c>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800059c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d101      	bne.n	80005a8 <circularBufferIsFull+0x2c>
	{
		return 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	e00e      	b.n	80005c6 <circularBufferIsFull+0x4a>
	}
	else if(buffer->front == 0 && buffer->rear == BUFFER_SIZE - 1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d108      	bne.n	80005c4 <circularBufferIsFull+0x48>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80005b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80005bc:	4293      	cmp	r3, r2
 80005be:	d101      	bne.n	80005c4 <circularBufferIsFull+0x48>
	{
		return 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <circularBufferIsFull+0x4a>
	}
	else
	{
		return 0;
 80005c4:	2300      	movs	r3, #0
	}
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <circularBufferIsEmpty>:
 *
 * RETURN		:	uint8_t
 *
 * **************************************************************************/
uint8_t circularBufferIsEmpty(Circular_Buffer_t *buffer)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
	if(buffer->front == -1)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d101      	bne.n	80005ea <circularBufferIsEmpty+0x18>
	{
		return 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e000      	b.n	80005ec <circularBufferIsEmpty+0x1a>
	}
	else
	{
		return 0;
 80005ea:	2300      	movs	r3, #0
	}
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <circularBufferClear>:
 *
 * RETURN		:	uint8_t
 *
 * **************************************************************************/
void circularBufferClear(Circular_Buffer_t *buffer)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	memset(buffer->data,'\0',BUFFER_SIZE);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fbdf 	bl	8004dcc <memset>
	buffer->front = -1;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	buffer->rear = -1;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f04f 32ff 	mov.w	r2, #4294967295
 800061e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <circularBufferWriteChar>:
 *
 * RETURN		:	uint8_t
 *
 * **************************************************************************/
CircularBufferState circularBufferWriteChar(Circular_Buffer_t *txBuffer, char data)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	70fb      	strb	r3, [r7, #3]
	if(circularBufferIsEmpty(txBuffer))
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ffcb 	bl	80005d2 <circularBufferIsEmpty>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00e      	beq.n	8000660 <circularBufferWriteChar+0x36>
	{
		txBuffer->front = 0;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		txBuffer->rear = 0;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		txBuffer->data[txBuffer->rear] = data;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	78f9      	ldrb	r1, [r7, #3]
 800065c:	54d1      	strb	r1, [r2, r3]
 800065e:	e014      	b.n	800068a <circularBufferWriteChar+0x60>
	}
	else if(circularBufferIsFull(txBuffer))
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff8b 	bl	800057c <circularBufferIsFull>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <circularBufferWriteChar+0x46>
	{
		return BUFFER_OVERFLOW;
 800066c:	2300      	movs	r3, #0
 800066e:	e00d      	b.n	800068c <circularBufferWriteChar+0x62>
	}
	else
	{
		txBuffer->rear++;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

		txBuffer->data[txBuffer->rear] = data;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	78f9      	ldrb	r1, [r7, #3]
 8000688:	54d1      	strb	r1, [r2, r3]
	}
	return BUFFER_WRITE_OK;
 800068a:	2302      	movs	r3, #2
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <circularBufferRead>:
 *
 * RETURN		:	uint8_t
 *
 * **************************************************************************/
char circularBufferRead(Circular_Buffer_t *rxBuffer)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	char readData;

	if(rxBuffer->front <= rxBuffer->rear)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dc0c      	bgt.n	80006c6 <circularBufferRead+0x32>
	{
		readData = rxBuffer->data[rxBuffer->front];
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	5cd3      	ldrb	r3, [r2, r3]
 80006b6:	73fb      	strb	r3, [r7, #15]
		rxBuffer->front++;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	return readData;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <esp8266Init>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
void esp8266Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	//Enabling the GPIO and UART Clock
    __HAL_RCC_USART2_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <esp8266Init+0xd4>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <esp8266Init+0xd4>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <esp8266Init+0xd4>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <esp8266Init+0xd4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <esp8266Init+0xd4>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <esp8266Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_PIN|RX_PIN;
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <esp8266Init+0xd8>)
 8000714:	220c      	movs	r2, #12
 8000716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <esp8266Init+0xd8>)
 800071a:	2202      	movs	r2, #2
 800071c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <esp8266Init+0xd8>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <esp8266Init+0xd8>)
 8000726:	2203      	movs	r2, #3
 8000728:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <esp8266Init+0xd8>)
 800072c:	2207      	movs	r2, #7
 800072e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	491e      	ldr	r1, [pc, #120]	; (80007ac <esp8266Init+0xd8>)
 8000732:	481f      	ldr	r0, [pc, #124]	; (80007b0 <esp8266Init+0xdc>)
 8000734:	f000 fe1e 	bl	8001374 <HAL_GPIO_Init>

	huart2.Instance = USART2;
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <esp8266Init+0xe0>)
 800073a:	4a1f      	ldr	r2, [pc, #124]	; (80007b8 <esp8266Init+0xe4>)
 800073c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <esp8266Init+0xe0>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <esp8266Init+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <esp8266Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <esp8266Init+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <esp8266Init+0xe0>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <esp8266Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <esp8266Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <esp8266Init+0xe0>)
 800076c:	f003 f9f6 	bl	8003b5c <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <esp8266Init+0xa6>
	{
	Error_Handler();
 8000776:	f000 fb81 	bl	8000e7c <Error_Handler>
	}

	/************** Enabling the USART1 Interrupts ************/
	HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	2101      	movs	r1, #1
 800077e:	2026      	movs	r0, #38	; 0x26
 8000780:	f000 fdc1 	bl	8001306 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000784:	2026      	movs	r0, #38	; 0x26
 8000786:	f000 fdda 	bl	800133e <HAL_NVIC_EnableIRQ>

	/************* Initializing the RX Buffer ***********/
	esp8266RxBuffer.front = -1;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <esp8266Init+0xe8>)
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	esp8266RxBuffer.front = -1;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <esp8266Init+0xe8>)
 8000796:	f04f 32ff 	mov.w	r2, #4294967295
 800079a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	20000110 	.word	0x20000110
 80007b0:	40020000 	.word	0x40020000
 80007b4:	200000c8 	.word	0x200000c8
 80007b8:	40004400 	.word	0x40004400
 80007bc:	20000124 	.word	0x20000124

080007c0 <esp8266Reset>:

void esp8266Reset(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	//Find the length of the Command
	uint16_t len = strlen(RESTART_COMMAND);
 80007c6:	480a      	ldr	r0, [pc, #40]	; (80007f0 <esp8266Reset+0x30>)
 80007c8:	f7ff fd02 	bl	80001d0 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	80fb      	strh	r3, [r7, #6]

	//Transmit the command
	HAL_UART_Transmit(&huart2, (uint8_t*)RESTART_COMMAND, len, 1000);
 80007d0:	88fa      	ldrh	r2, [r7, #6]
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	4906      	ldr	r1, [pc, #24]	; (80007f0 <esp8266Reset+0x30>)
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <esp8266Reset+0x34>)
 80007da:	f003 fa19 	bl	8003c10 <HAL_UART_Transmit>

	HAL_Delay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f000 fc91 	bl	8001108 <HAL_Delay>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000001c 	.word	0x2000001c
 80007f4:	200000c8 	.word	0x200000c8

080007f8 <esp8266WriteCommand>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
esp8266State esp8266WriteCommand(char *command)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	//Clear the receive buffer
	circularBufferClear(&esp8266RxBuffer);
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <esp8266WriteCommand+0x4c>)
 8000802:	f7ff fef9 	bl	80005f8 <circularBufferClear>

	//Find the length of the Command
	uint16_t len = strlen(command);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fce2 	bl	80001d0 <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	81fb      	strh	r3, [r7, #14]

	//Transmit the command
	if(HAL_UART_Transmit(&huart2, (uint8_t*)command, len, 1000) != HAL_OK)
 8000810:	89fa      	ldrh	r2, [r7, #14]
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <esp8266WriteCommand+0x50>)
 800081a:	f003 f9f9 	bl	8003c10 <HAL_UART_Transmit>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <esp8266WriteCommand+0x30>
	{
		return ESP88266_WRITE_FAILED;
 8000824:	2301      	movs	r3, #1
 8000826:	e008      	b.n	800083a <esp8266WriteCommand+0x42>
	}

	//Enable the RXNE Interrupt to store the response inside the receive buffer
	__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <esp8266WriteCommand+0x50>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68da      	ldr	r2, [r3, #12]
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <esp8266WriteCommand+0x50>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 0220 	orr.w	r2, r2, #32
 8000836:	60da      	str	r2, [r3, #12]

	return ESP88266_WRITE_SUCCESSFUL;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000124 	.word	0x20000124
 8000848:	200000c8 	.word	0x200000c8

0800084c <esp8266CheckResponse>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
esp8266State esp8266CheckResponse(char *response)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	uint32_t currPos = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
	uint32_t len = strlen(response);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff fcb9 	bl	80001d0 <strlen>
 800085e:	60f8      	str	r0, [r7, #12]
	char temp;

	for(uint32_t i=0; i<BUFFER_SIZE; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	e01f      	b.n	80008a6 <esp8266CheckResponse+0x5a>
	{
		temp = esp8266RxBuffer.data[i];
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <esp8266CheckResponse+0x6c>)
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	72fb      	strb	r3, [r7, #11]
		if(temp == response[currPos])
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	7afa      	ldrb	r2, [r7, #11]
 800087a:	429a      	cmp	r2, r3
 800087c:	d10e      	bne.n	800089c <esp8266CheckResponse+0x50>
		{
			currPos++;
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
			if(currPos == len)
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d109      	bne.n	80008a0 <esp8266CheckResponse+0x54>
			{
				esp8266RxBuffer.front = i+1;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	3301      	adds	r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <esp8266CheckResponse+0x6c>)
 8000894:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
				return ESP88266_RESPONSE_CORRECT;
 8000898:	2302      	movs	r3, #2
 800089a:	e009      	b.n	80008b0 <esp8266CheckResponse+0x64>
				//__HAL_UART_DISABLE_IT(&huart2,UART_IT_RXNE);
			}
		}
		else
		{
			currPos = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<BUFFER_SIZE; i++)
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	3301      	adds	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ac:	d3db      	bcc.n	8000866 <esp8266CheckResponse+0x1a>
		}
	}

	return ESP88266_RESPONSE_WRONG;
 80008ae:	2303      	movs	r3, #3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000124 	.word	0x20000124

080008bc <esp8266IRQHandler>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
void esp8266IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	/******************* Handling the RXNE Interrupt *************************/
	if((__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)) && ((__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE))))
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <esp8266IRQHandler+0x54>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	d11a      	bne.n	8000906 <esp8266IRQHandler+0x4a>
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <esp8266IRQHandler+0x54>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d013      	beq.n	8000906 <esp8266IRQHandler+0x4a>
	{
		char temp = huart2.Instance->DR;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <esp8266IRQHandler+0x54>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	71fb      	strb	r3, [r7, #7]
		if(circularBufferWriteChar(&esp8266RxBuffer,temp) != BUFFER_WRITE_OK)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4619      	mov	r1, r3
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <esp8266IRQHandler+0x58>)
 80008ec:	f7ff fe9d 	bl	800062a <circularBufferWriteChar>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d007      	beq.n	8000906 <esp8266IRQHandler+0x4a>
		{
			__HAL_UART_DISABLE_IT(&huart2,UART_IT_RXNE);
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <esp8266IRQHandler+0x54>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <esp8266IRQHandler+0x54>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f022 0220 	bic.w	r2, r2, #32
 8000904:	60da      	str	r2, [r3, #12]
		}
	}
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000c8 	.word	0x200000c8
 8000914:	20000124 	.word	0x20000124

08000918 <esp8266WaitUntilResponse>:
 *
 * RETURN		:	void
 *
 * **************************************************************************/
HAL_StatusTypeDef esp8266WaitUntilResponse(char *response, uint32_t timeout)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = HAL_GetTick();
 8000922:	f000 fbe5 	bl	80010f0 <HAL_GetTick>
 8000926:	60f8      	str	r0, [r7, #12]

	while((esp8266CheckResponse(response) != ESP88266_RESPONSE_CORRECT))
 8000928:	e009      	b.n	800093e <esp8266WaitUntilResponse+0x26>
	{
		if((HAL_GetTick() - tickstart) > timeout)
 800092a:	f000 fbe1 	bl	80010f0 <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d201      	bcs.n	800093e <esp8266WaitUntilResponse+0x26>
		{
			return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e006      	b.n	800094c <esp8266WaitUntilResponse+0x34>
	while((esp8266CheckResponse(response) != ESP88266_RESPONSE_CORRECT))
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ff84 	bl	800084c <esp8266CheckResponse>
 8000944:	4603      	mov	r3, r0
 8000946:	2b02      	cmp	r3, #2
 8000948:	d1ef      	bne.n	800092a <esp8266WaitUntilResponse+0x12>
		}
	}

	return HAL_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <esp8266SetToStationMode>:
 *
 * RETURN		:	HAL_StatusTypeDef
 *
 * **************************************************************************/
HAL_StatusTypeDef esp8266SetToStationMode(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	esp8266WriteCommand(STATION_MODE);
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <esp8266SetToStationMode+0x24>)
 800095a:	f7ff ff4d 	bl	80007f8 <esp8266WriteCommand>

	if(esp8266WaitUntilResponse("OK\r\n", ESP8266_MAX_WAIT) != HAL_OK)
 800095e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <esp8266SetToStationMode+0x28>)
 8000964:	f7ff ffd8 	bl	8000918 <esp8266WaitUntilResponse>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <esp8266SetToStationMode+0x1e>
	{
		return HAL_TIMEOUT;
 800096e:	2303      	movs	r3, #3
 8000970:	e000      	b.n	8000974 <esp8266SetToStationMode+0x20>
	}

	return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000028 	.word	0x20000028
 800097c:	08005594 	.word	0x08005594

08000980 <esp8266Connect>:
 *
 * RETURN		:	HAL_StatusTypeDef
 *
 * **************************************************************************/
HAL_StatusTypeDef esp8266Connect(char *ssid, char *password)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000986:	af00      	add	r7, sp, #0
 8000988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800098c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000990:	6018      	str	r0, [r3, #0]
 8000992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000996:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800099a:	6019      	str	r1, [r3, #0]
	char command[BUFFER_SIZE] = "0";
 800099c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80009a0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80009a4:	2230      	movs	r2, #48	; 0x30
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	3304      	adds	r3, #4
 80009aa:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 fa0b 	bl	8004dcc <memset>

	sprintf(command,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,password);
 80009b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80009ba:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80009be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80009c2:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 80009c6:	f107 0008 	add.w	r0, r7, #8
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	490c      	ldr	r1, [pc, #48]	; (8000a00 <esp8266Connect+0x80>)
 80009d0:	f004 f9dc 	bl	8004d8c <siprintf>

	//Writing to the ESP Module
	esp8266WriteCommand(command);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff0d 	bl	80007f8 <esp8266WriteCommand>

	if(esp8266WaitUntilResponse("OK\r\n", ESP8266_MAX_WAIT) != HAL_OK)
 80009de:	f644 6120 	movw	r1, #20000	; 0x4e20
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <esp8266Connect+0x84>)
 80009e4:	f7ff ff98 	bl	8000918 <esp8266WaitUntilResponse>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <esp8266Connect+0x72>
	{
		return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e000      	b.n	80009f4 <esp8266Connect+0x74>
	}
	return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800559c 	.word	0x0800559c
 8000a04:	08005594 	.word	0x08005594

08000a08 <esp8266GetIP>:
 *
 * RETURN		:	HAL_StatusTypeDef
 *
 * **************************************************************************/
HAL_StatusTypeDef esp8266GetIP(char *ip)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	char temp = '0';
 8000a10:	2330      	movs	r3, #48	; 0x30
 8000a12:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

	//Writing to the ESP Module
	esp8266WriteCommand("AT+CIFSR\r\n");
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <esp8266GetIP+0x60>)
 8000a1a:	f7ff feed 	bl	80007f8 <esp8266WriteCommand>

	if(esp8266WaitUntilResponse("CIFSR:STAIP,\"", ESP8266_MAX_WAIT) != HAL_OK)
 8000a1e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <esp8266GetIP+0x64>)
 8000a24:	f7ff ff78 	bl	8000918 <esp8266WaitUntilResponse>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <esp8266GetIP+0x2a>
	{
		return HAL_TIMEOUT;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e015      	b.n	8000a5e <esp8266GetIP+0x56>
	}

	HAL_Delay(100);	//Waiting for rest of the data to come
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f000 fb68 	bl	8001108 <HAL_Delay>

	while(1)
	{
		temp = circularBufferRead(&esp8266RxBuffer);
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <esp8266GetIP+0x68>)
 8000a3a:	f7ff fe2b 	bl	8000694 <circularBufferRead>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73bb      	strb	r3, [r7, #14]
		if(temp == '\"')
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	2b22      	cmp	r3, #34	; 0x22
 8000a46:	d008      	beq.n	8000a5a <esp8266GetIP+0x52>
		{
			break;
		}
		ip[i] = temp;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	7bba      	ldrb	r2, [r7, #14]
 8000a50:	701a      	strb	r2, [r3, #0]
		i++;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	3301      	adds	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
		temp = circularBufferRead(&esp8266RxBuffer);
 8000a58:	e7ee      	b.n	8000a38 <esp8266GetIP+0x30>
			break;
 8000a5a:	bf00      	nop
	}
	return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	080055b4 	.word	0x080055b4
 8000a6c:	080055c0 	.word	0x080055c0
 8000a70:	20000124 	.word	0x20000124

08000a74 <esp8266EnableMultiConn>:
 *
 * RETURN		:	HAL_StatusTypeDef
 *
 * **************************************************************************/
HAL_StatusTypeDef esp8266EnableMultiConn(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	//Writing to the ESP Module
	esp8266WriteCommand("AT+CIPMUX=1\r\n");
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <esp8266EnableMultiConn+0x24>)
 8000a7a:	f7ff febd 	bl	80007f8 <esp8266WriteCommand>

	if(esp8266WaitUntilResponse("OK\r\n", ESP8266_MAX_WAIT) != HAL_OK)
 8000a7e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <esp8266EnableMultiConn+0x28>)
 8000a84:	f7ff ff48 	bl	8000918 <esp8266WaitUntilResponse>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <esp8266EnableMultiConn+0x1e>
	{
		return HAL_TIMEOUT;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e000      	b.n	8000a94 <esp8266EnableMultiConn+0x20>
	}

	return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	080055d0 	.word	0x080055d0
 8000a9c:	08005594 	.word	0x08005594

08000aa0 <esp8266CreateTCPServer>:
 *
 * RETURN		:	HAL_StatusTypeDef
 *
 * **************************************************************************/
HAL_StatusTypeDef esp8266CreateTCPServer(uint8_t portNumber)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000aae:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8000ab2:	701a      	strb	r2, [r3, #0]
	char command[BUFFER_SIZE] = "0";
 8000ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ab8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000abc:	2230      	movs	r2, #48	; 0x30
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 f97f 	bl	8004dcc <memset>

	sprintf(command,"AT+CIPSERVER=1,%d\r\n",portNumber);
 8000ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ad2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <esp8266CreateTCPServer+0x70>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 f954 	bl	8004d8c <siprintf>

	//Writing to the ESP Module
	esp8266WriteCommand(command);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe85 	bl	80007f8 <esp8266WriteCommand>

	if(esp8266WaitUntilResponse("OK\r\n", ESP8266_MAX_WAIT) != HAL_OK)
 8000aee:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <esp8266CreateTCPServer+0x74>)
 8000af4:	f7ff ff10 	bl	8000918 <esp8266WaitUntilResponse>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <esp8266CreateTCPServer+0x62>
	{
		return HAL_TIMEOUT;
 8000afe:	2303      	movs	r3, #3
 8000b00:	e000      	b.n	8000b04 <esp8266CreateTCPServer+0x64>
	}

	return HAL_OK;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	080055e0 	.word	0x080055e0
 8000b14:	08005594 	.word	0x08005594

08000b18 <esp8266SendDataToServer>:
 *
 * RETURN		:	HAL_StatusTypeDef
 *
 * **************************************************************************/
HAL_StatusTypeDef esp8266SendDataToServer(volatile char linkId, char *data)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4602      	mov	r2, r0
 8000b22:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000b26:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000b2a:	6019      	str	r1, [r3, #0]
 8000b2c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000b30:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8000b34:	701a      	strb	r2, [r3, #0]
	char command[BUFFER_SIZE] = "0";
 8000b36:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000b3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	3304      	adds	r3, #4
 8000b44:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 f93e 	bl	8004dcc <memset>

	uint32_t len = strlen(data);
 8000b50:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000b54:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	f7ff fb39 	bl	80001d0 <strlen>
 8000b5e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c

	sprintf(command,"AT+CIPSEND=%c,%ld\r\n",linkId,len);
 8000b62:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000b66:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f107 000c 	add.w	r0, r7, #12
 8000b74:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000b78:	4926      	ldr	r1, [pc, #152]	; (8000c14 <esp8266SendDataToServer+0xfc>)
 8000b7a:	f004 f907 	bl	8004d8c <siprintf>

	//Writing to the ESP Module
	esp8266WriteCommand(command);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe38 	bl	80007f8 <esp8266WriteCommand>

	// > Indicates that now you can send data
	if(esp8266WaitUntilResponse(">", ESP8266_MAX_WAIT) != HAL_OK)
 8000b88:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000b8c:	4822      	ldr	r0, [pc, #136]	; (8000c18 <esp8266SendDataToServer+0x100>)
 8000b8e:	f7ff fec3 	bl	8000918 <esp8266WaitUntilResponse>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <esp8266SendDataToServer+0x84>
	{
		return HAL_TIMEOUT;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e035      	b.n	8000c08 <esp8266SendDataToServer+0xf0>
	}

	//Send Data
	esp8266WriteCommand(data);
 8000b9c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ba0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	f7ff fe27 	bl	80007f8 <esp8266WriteCommand>

	//Wait for send Okay
	if(esp8266WaitUntilResponse("SEND OK", ESP8266_MAX_WAIT) != HAL_OK)
 8000baa:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000bae:	481b      	ldr	r0, [pc, #108]	; (8000c1c <esp8266SendDataToServer+0x104>)
 8000bb0:	f7ff feb2 	bl	8000918 <esp8266WaitUntilResponse>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <esp8266SendDataToServer+0xa6>
	{
		return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e024      	b.n	8000c08 <esp8266SendDataToServer+0xf0>
	}

	//Close the Connection with the client
	memset(command,'\0',BUFFER_SIZE);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 f8ff 	bl	8004dcc <memset>

	sprintf(command,"AT+CIPCLOSE=%c\r\n",linkId);
 8000bce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000bd2:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	490f      	ldr	r1, [pc, #60]	; (8000c20 <esp8266SendDataToServer+0x108>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 f8d2 	bl	8004d8c <siprintf>

	esp8266WriteCommand(command);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe03 	bl	80007f8 <esp8266WriteCommand>

	if(esp8266WaitUntilResponse("OK\r\n", ESP8266_MAX_WAIT) != HAL_OK)
 8000bf2:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000bf6:	480b      	ldr	r0, [pc, #44]	; (8000c24 <esp8266SendDataToServer+0x10c>)
 8000bf8:	f7ff fe8e 	bl	8000918 <esp8266WaitUntilResponse>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <esp8266SendDataToServer+0xee>
	{
		return HAL_TIMEOUT;
 8000c02:	2303      	movs	r3, #3
 8000c04:	e000      	b.n	8000c08 <esp8266SendDataToServer+0xf0>
	}

	return HAL_OK;
 8000c06:	2300      	movs	r3, #0

}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	080055f4 	.word	0x080055f4
 8000c18:	08005608 	.word	0x08005608
 8000c1c:	0800560c 	.word	0x0800560c
 8000c20:	08005614 	.word	0x08005614
 8000c24:	08005594 	.word	0x08005594

08000c28 <esp8266GetLinkId>:
 *
 * RETURN		:	HAL_StatusTypeDef
 *
 * **************************************************************************/
char esp8266GetLinkId(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
	//Clearing the circular buffer
	circularBufferClear(&esp8266RxBuffer);
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <esp8266GetLinkId+0x34>)
 8000c30:	f7ff fce2 	bl	80005f8 <circularBufferClear>

	//Wait for +IPD. this will be received in the RX buffer when a TCP Client tries to connect to server
	while((esp8266CheckResponse("+IPD,")) != ESP88266_RESPONSE_CORRECT);
 8000c34:	bf00      	nop
 8000c36:	480a      	ldr	r0, [pc, #40]	; (8000c60 <esp8266GetLinkId+0x38>)
 8000c38:	f7ff fe08 	bl	800084c <esp8266CheckResponse>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d1f9      	bne.n	8000c36 <esp8266GetLinkId+0xe>

	//Wait for the rest of the data to be received
	HAL_Delay(100);
 8000c42:	2064      	movs	r0, #100	; 0x64
 8000c44:	f000 fa60 	bl	8001108 <HAL_Delay>

	//Extract the Link Id
	char linkId = circularBufferRead(&esp8266RxBuffer);
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <esp8266GetLinkId+0x34>)
 8000c4a:	f7ff fd23 	bl	8000694 <circularBufferRead>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]

	//Return the Link Id
	return linkId;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000124 	.word	0x20000124
 8000c60:	08005678 	.word	0x08005678

08000c64 <main>:
/*************** Function Prototype *****************/
void systemClockConfig(void);
void gpioConfig(void);

int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 f9db 	bl	8001024 <HAL_Init>

  /* Configure the system clock */
  systemClockConfig();
 8000c6e:	f000 f875 	bl	8000d5c <systemClockConfig>

  gpioConfig();
 8000c72:	f000 f8dd 	bl	8000e30 <gpioConfig>

  /* Initialize all configured peripherals */
  esp8266Init();
 8000c76:	f7ff fd2d 	bl	80006d4 <esp8266Init>

  //Reseting the ESP Module
  esp8266Reset();
 8000c7a:	f7ff fda1 	bl	80007c0 <esp8266Reset>

  //Setting the Module to Station Mode
  if(esp8266SetToStationMode() != HAL_OK)
 8000c7e:	f7ff fe69 	bl	8000954 <esp8266SetToStationMode>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <main+0x28>
  {
	  Error_Handler();
 8000c88:	f000 f8f8 	bl	8000e7c <Error_Handler>
  }

  //Connecting the Module to the Internet
  if(esp8266Connect(SSID,PASSWORD) != HAL_OK)
 8000c8c:	4929      	ldr	r1, [pc, #164]	; (8000d34 <main+0xd0>)
 8000c8e:	482a      	ldr	r0, [pc, #168]	; (8000d38 <main+0xd4>)
 8000c90:	f7ff fe76 	bl	8000980 <esp8266Connect>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <main+0x3a>
  {
	  Error_Handler();
 8000c9a:	f000 f8ef 	bl	8000e7c <Error_Handler>
  }

  //Enabling Multiple Connections
  if(esp8266EnableMultiConn() != HAL_OK)
 8000c9e:	f7ff fee9 	bl	8000a74 <esp8266EnableMultiConn>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <main+0x48>
  {
	  Error_Handler();
 8000ca8:	f000 f8e8 	bl	8000e7c <Error_Handler>
  }


  //Creating a TCP Server
  if(esp8266CreateTCPServer(80) != HAL_OK)
 8000cac:	2050      	movs	r0, #80	; 0x50
 8000cae:	f7ff fef7 	bl	8000aa0 <esp8266CreateTCPServer>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <main+0x58>
  {
	  Error_Handler();
 8000cb8:	f000 f8e0 	bl	8000e7c <Error_Handler>
  }

  //Getting the IP Address of the Module
  if(esp8266GetIP(ip) != HAL_OK)
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xd8>)
 8000cbe:	f7ff fea3 	bl	8000a08 <esp8266GetIP>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <main+0x68>
  {
	  Error_Handler();
 8000cc8:	f000 f8d8 	bl	8000e7c <Error_Handler>
  //  {
  //	  Error_Handler();
  //  }
  //

  char linkId = '8';
 8000ccc:	2338      	movs	r3, #56	; 0x38
 8000cce:	71fb      	strb	r3, [r7, #7]
  {
	  /*
	   * Waiting for a request from the TCP Client
	   * Once request received getting the Link ID
	   */
	  linkId = esp8266GetLinkId();
 8000cd0:	f7ff ffaa 	bl	8000c28 <esp8266GetLinkId>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]

	  //Identify which page to display
	  if((esp8266CheckResponse("GET /light")) != ESP88266_RESPONSE_CORRECT)
 8000cd8:	4819      	ldr	r0, [pc, #100]	; (8000d40 <main+0xdc>)
 8000cda:	f7ff fdb7 	bl	800084c <esp8266CheckResponse>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d007      	beq.n	8000cf4 <main+0x90>
	  {
		  /*
		   * Now sending the data to the TCP Client
		   */
		  esp8266SendDataToServer(linkId, home);
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <main+0xe0>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff13 	bl	8000b18 <esp8266SendDataToServer>
 8000cf2:	e7ed      	b.n	8000cd0 <main+0x6c>
	  }
	  else
	  {
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	4814      	ldr	r0, [pc, #80]	; (8000d48 <main+0xe4>)
 8000cf8:	f000 fcd8 	bl	80016ac <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <main+0xb6>
		  {
			  esp8266SendDataToServer(linkId, home);
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <main+0xe0>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff04 	bl	8000b18 <esp8266SendDataToServer>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8000d10:	2104      	movs	r1, #4
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <main+0xe4>)
 8000d14:	f000 fce2 	bl	80016dc <HAL_GPIO_TogglePin>
 8000d18:	e7da      	b.n	8000cd0 <main+0x6c>
		  }
		  else
		  {
			  esp8266SendDataToServer(linkId, ledON);
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <main+0xe8>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fef8 	bl	8000b18 <esp8266SendDataToServer>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8000d28:	2104      	movs	r1, #4
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <main+0xe4>)
 8000d2c:	f000 fcd6 	bl	80016dc <HAL_GPIO_TogglePin>
	  linkId = esp8266GetLinkId();
 8000d30:	e7ce      	b.n	8000cd0 <main+0x6c>
 8000d32:	bf00      	nop
 8000d34:	20000010 	.word	0x20000010
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000038 	.word	0x20000038
 8000d40:	08005e88 	.word	0x08005e88
 8000d44:	20000048 	.word	0x20000048
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	2000004c 	.word	0x2000004c

08000d50 <USART2_IRQHandler>:

}

/***************** UART2 IRQ Handler **************************/
void USART2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	esp8266IRQHandler();
 8000d54:	f7ff fdb2 	bl	80008bc <esp8266IRQHandler>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <systemClockConfig>:

/******************* System Clock Config *****************************/
void systemClockConfig(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	; 0x50
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	2230      	movs	r2, #48	; 0x30
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 f82e 	bl	8004dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <systemClockConfig+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <systemClockConfig+0xcc>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <systemClockConfig+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <systemClockConfig+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <systemClockConfig+0xd0>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <systemClockConfig+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fa22 	bl	800322c <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <systemClockConfig+0x96>
  {
    Error_Handler();
 8000dee:	f000 f845 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2105      	movs	r1, #5
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 fc83 	bl	800371c <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <systemClockConfig+0xc4>
  {
    Error_Handler();
 8000e1c:	f000 f82e 	bl	8000e7c <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	; 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <gpioConfig>:

/*********************** GPIO Config ****************************/
void gpioConfig(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <gpioConfig+0x40>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <gpioConfig+0x40>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <gpioConfig+0x40>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

	gpioInitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <gpioConfig+0x44>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	605a      	str	r2, [r3, #4]
	gpioInitStruct.Pin = GPIO_PIN_2;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <gpioConfig+0x44>)
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOC, &gpioInitStruct);
 8000e5e:	4905      	ldr	r1, [pc, #20]	; (8000e74 <gpioConfig+0x44>)
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <gpioConfig+0x48>)
 8000e62:	f000 fa87 	bl	8001374 <HAL_GPIO_Init>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	2000032c 	.word	0x2000032c
 8000e78:	40020800 	.word	0x40020800

08000e7c <Error_Handler>:

/**************** Error Handler ************************/
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 fa12 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8d0 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <OTG_FS_IRQHandler+0x10>)
 8000f32:	f000 fbed 	bl	8001710 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000348 	.word	0x20000348

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f003 ff44 	bl	8004dfc <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	20000340 	.word	0x20000340
 8000fa8:	20000870 	.word	0x20000870

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd4:	f7ff ffea 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f003 ff03 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fe2f 	bl	8000c64 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001014:	08005ef0 	.word	0x08005ef0
  ldr r2, =_sbss
 8001018:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800101c:	20000870 	.word	0x20000870

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f94f 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff ff16 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f967 	bl	800135a <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f92f 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000050 	.word	0x20000050
 80010c0:	20000058 	.word	0x20000058
 80010c4:	20000054 	.word	0x20000054

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000058 	.word	0x20000058
 80010ec:	20000344 	.word	0x20000344

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000344 	.word	0x20000344

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000058 	.word	0x20000058

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff29 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff3e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff8e 	bl	8001244 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff31 	bl	80011b4 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	e16b      	b.n	8001668 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001390:	2201      	movs	r2, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	f040 815a 	bne.w	8001662 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d005      	beq.n	80013c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d130      	bne.n	8001428 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013fc:	2201      	movs	r2, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f003 0201 	and.w	r2, r3, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d017      	beq.n	8001464 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d123      	bne.n	80014b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80b4 	beq.w	8001662 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b60      	ldr	r3, [pc, #384]	; (8001680 <HAL_GPIO_Init+0x30c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a5f      	ldr	r2, [pc, #380]	; (8001680 <HAL_GPIO_Init+0x30c>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b5d      	ldr	r3, [pc, #372]	; (8001680 <HAL_GPIO_Init+0x30c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001516:	4a5b      	ldr	r2, [pc, #364]	; (8001684 <HAL_GPIO_Init+0x310>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_GPIO_Init+0x314>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d02b      	beq.n	800159a <HAL_GPIO_Init+0x226>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a51      	ldr	r2, [pc, #324]	; (800168c <HAL_GPIO_Init+0x318>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d025      	beq.n	8001596 <HAL_GPIO_Init+0x222>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_GPIO_Init+0x31c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01f      	beq.n	8001592 <HAL_GPIO_Init+0x21e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_GPIO_Init+0x320>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d019      	beq.n	800158e <HAL_GPIO_Init+0x21a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_GPIO_Init+0x324>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x216>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_GPIO_Init+0x328>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x212>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x32c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x20e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_GPIO_Init+0x330>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x20a>
 800157a:	2307      	movs	r3, #7
 800157c:	e00e      	b.n	800159c <HAL_GPIO_Init+0x228>
 800157e:	2308      	movs	r3, #8
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x228>
 8001582:	2306      	movs	r3, #6
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x228>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x228>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x228>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x228>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x228>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x228>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ac:	4935      	ldr	r1, [pc, #212]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_GPIO_Init+0x334>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015de:	4a32      	ldr	r2, [pc, #200]	; (80016a8 <HAL_GPIO_Init+0x334>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_GPIO_Init+0x334>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_GPIO_Init+0x334>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_GPIO_Init+0x334>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001632:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_GPIO_Init+0x334>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_GPIO_Init+0x334>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_GPIO_Init+0x334>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f ae90 	bls.w	8001390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40013800 	.word	0x40013800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40021400 	.word	0x40021400
 80016a0:	40021800 	.word	0x40021800
 80016a4:	40021c00 	.word	0x40021c00
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e001      	b.n	80016ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43d9      	mvns	r1, r3
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	400b      	ands	r3, r1
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f002 ff3c 	bl	80045a4 <USB_GetMode>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	f040 80fb 	bne.w	800192a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 feff 	bl	800453c <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80f1 	beq.w	8001928 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fef6 	bl	800453c <USB_ReadInterrupts>
 8001750:	4603      	mov	r3, r0
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800175a:	d104      	bne.n	8001766 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001764:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fee6 	bl	800453c <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800177a:	d104      	bne.n	8001786 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001784:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fed6 	bl	800453c <USB_ReadInterrupts>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800179a:	d104      	bne.n	80017a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fec6 	bl	800453c <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d103      	bne.n	80017c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2202      	movs	r2, #2
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 feb8 	bl	800453c <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017d6:	d120      	bne.n	800181a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d113      	bne.n	800181a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80017f2:	2110      	movs	r1, #16
 80017f4:	6938      	ldr	r0, [r7, #16]
 80017f6:	f002 fde9 	bl	80043cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80017fa:	6938      	ldr	r0, [r7, #16]
 80017fc:	f002 fe18 	bl	8004430 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7a5b      	ldrb	r3, [r3, #9]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d105      	bne.n	8001814 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fed6 	bl	80045c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f003 f98e 	bl	8004b36 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f002 fe8c 	bl	800453c <USB_ReadInterrupts>
 8001824:	4603      	mov	r3, r0
 8001826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182e:	d102      	bne.n	8001836 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f001 fc87 	bl	8003144 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fe7e 	bl	800453c <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b08      	cmp	r3, #8
 8001848:	d106      	bne.n	8001858 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f003 f957 	bl	8004afe <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2208      	movs	r2, #8
 8001856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fe6d 	bl	800453c <USB_ReadInterrupts>
 8001862:	4603      	mov	r3, r0
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800186c:	d139      	bne.n	80018e2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fee1 	bl	800463a <USB_HC_ReadInterrupt>
 8001878:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e025      	b.n	80018cc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d018      	beq.n	80018c6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018aa:	d106      	bne.n	80018ba <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f859 	bl	800196a <HCD_HC_IN_IRQHandler>
 80018b8:	e005      	b.n	80018c6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 febb 	bl	800263c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	461a      	mov	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d3d3      	bcc.n	8001880 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fe28 	bl	800453c <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d101      	bne.n	80018fa <HAL_HCD_IRQHandler+0x1ea>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_HCD_IRQHandler+0x1ec>
 80018fa:	2300      	movs	r3, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d014      	beq.n	800192a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0210 	bic.w	r2, r2, #16
 800190e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f001 fb38 	bl	8002f86 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0210 	orr.w	r2, r2, #16
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	e000      	b.n	800192a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001928:	bf00      	nop
    }
  }
}
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_HCD_Stop+0x16>
 8001942:	2302      	movs	r3, #2
 8001944:	e00d      	b.n	8001962 <HAL_HCD_Stop+0x32>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f002 ffa2 	bl	800489c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fdea 	bl	8004562 <USB_ReadChInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b04      	cmp	r3, #4
 8001996:	d11a      	bne.n	80019ce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	015a      	lsls	r2, r3, #5
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4413      	add	r3, r2
 80019a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a4:	461a      	mov	r2, r3
 80019a6:	2304      	movs	r3, #4
 80019a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	334d      	adds	r3, #77	; 0x4d
 80019ba:	2207      	movs	r2, #7
 80019bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fe48 	bl	800465c <USB_HC_Halt>
 80019cc:	e09e      	b.n	8001b0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fdc3 	bl	8004562 <USB_ReadChInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e6:	d11b      	bne.n	8001a20 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f4:	461a      	mov	r2, r3
 80019f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	334d      	adds	r3, #77	; 0x4d
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fe1f 	bl	800465c <USB_HC_Halt>
 8001a1e:	e075      	b.n	8001b0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fd9a 	bl	8004562 <USB_ReadChInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d11a      	bne.n	8001a6e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a44:	461a      	mov	r2, r3
 8001a46:	2308      	movs	r3, #8
 8001a48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	334d      	adds	r3, #77	; 0x4d
 8001a5a:	2206      	movs	r2, #6
 8001a5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fdf8 	bl	800465c <USB_HC_Halt>
 8001a6c:	e04e      	b.n	8001b0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fd73 	bl	8004562 <USB_ReadChInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d11b      	bne.n	8001ac0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a94:	461a      	mov	r2, r3
 8001a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	334d      	adds	r3, #77	; 0x4d
 8001aac:	2209      	movs	r2, #9
 8001aae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fdcf 	bl	800465c <USB_HC_Halt>
 8001abe:	e025      	b.n	8001b0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fd4a 	bl	8004562 <USB_ReadChInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad4:	2b80      	cmp	r3, #128	; 0x80
 8001ad6:	d119      	bne.n	8001b0c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	334d      	adds	r3, #77	; 0x4d
 8001afa:	2207      	movs	r2, #7
 8001afc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fda8 	bl	800465c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fd24 	bl	8004562 <USB_ReadChInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b24:	d112      	bne.n	8001b4c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fd94 	bl	800465c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b40:	461a      	mov	r2, r3
 8001b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b46:	6093      	str	r3, [r2, #8]
 8001b48:	f000 bd75 	b.w	8002636 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fd04 	bl	8004562 <USB_ReadChInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f040 8128 	bne.w	8001db6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b72:	461a      	mov	r2, r3
 8001b74:	2320      	movs	r3, #32
 8001b76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	331b      	adds	r3, #27
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d119      	bne.n	8001bc2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	331b      	adds	r3, #27
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	0151      	lsls	r1, r2, #5
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	440a      	add	r2, r1
 8001bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	799b      	ldrb	r3, [r3, #6]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01b      	beq.n	8001c02 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3330      	adds	r3, #48	; 0x30
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	1ac9      	subs	r1, r1, r3
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4403      	add	r3, r0
 8001bfe:	3338      	adds	r3, #56	; 0x38
 8001c00:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	334d      	adds	r3, #77	; 0x4d
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	3344      	adds	r3, #68	; 0x44
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3326      	adds	r3, #38	; 0x26
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	3326      	adds	r3, #38	; 0x26
 8001c62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d110      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fcf3 	bl	800465c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	461a      	mov	r2, r3
 8001c84:	2310      	movs	r3, #16
 8001c86:	6093      	str	r3, [r2, #8]
 8001c88:	e03d      	b.n	8001d06 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	3326      	adds	r3, #38	; 0x26
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d00a      	beq.n	8001cb6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3326      	adds	r3, #38	; 0x26
 8001cb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d127      	bne.n	8001d06 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	0151      	lsls	r1, r2, #5
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	440a      	add	r2, r1
 8001ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	334c      	adds	r3, #76	; 0x4c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	334c      	adds	r3, #76	; 0x4c
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f002 ff26 	bl	8004b52 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	799b      	ldrb	r3, [r3, #6]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d13b      	bne.n	8001d86 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3338      	adds	r3, #56	; 0x38
 8001d1e:	6819      	ldr	r1, [r3, #0]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4403      	add	r3, r0
 8001d2e:	3328      	adds	r3, #40	; 0x28
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	440b      	add	r3, r1
 8001d34:	1e59      	subs	r1, r3, #1
 8001d36:	78fa      	ldrb	r2, [r7, #3]
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4403      	add	r3, r0
 8001d44:	3328      	adds	r3, #40	; 0x28
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8470 	beq.w	8002636 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	333c      	adds	r3, #60	; 0x3c
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	f083 0301 	eor.w	r3, r3, #1
 8001d6e:	b2d8      	uxtb	r0, r3
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	333c      	adds	r3, #60	; 0x3c
 8001d7e:	4602      	mov	r2, r0
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	f000 bc58 	b.w	8002636 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	333c      	adds	r3, #60	; 0x3c
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	f083 0301 	eor.w	r3, r3, #1
 8001d9e:	b2d8      	uxtb	r0, r3
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	333c      	adds	r3, #60	; 0x3c
 8001dae:	4602      	mov	r2, r0
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	f000 bc40 	b.w	8002636 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fbcf 	bl	8004562 <USB_ReadChInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d131      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2320      	movs	r3, #32
 8001dde:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	331a      	adds	r3, #26
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f040 841f 	bne.w	8002636 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	331b      	adds	r3, #27
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	334d      	adds	r3, #77	; 0x4d
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fc17 	bl	800465c <USB_HC_Halt>
 8001e2e:	f000 bc02 	b.w	8002636 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fb91 	bl	8004562 <USB_ReadChInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	f040 8305 	bne.w	8002456 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	334d      	adds	r3, #77	; 0x4d
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d114      	bne.n	8001e9e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	334d      	adds	r3, #77	; 0x4d
 8001e84:	2202      	movs	r2, #2
 8001e86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	334c      	adds	r3, #76	; 0x4c
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e2cc      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	334d      	adds	r3, #77	; 0x4d
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d114      	bne.n	8001ede <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	334d      	adds	r3, #77	; 0x4d
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	334c      	adds	r3, #76	; 0x4c
 8001ed8:	2205      	movs	r2, #5
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e2ac      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	334d      	adds	r3, #77	; 0x4d
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b07      	cmp	r3, #7
 8001ef2:	d00b      	beq.n	8001f0c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	334d      	adds	r3, #77	; 0x4d
 8001f04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f06:	2b09      	cmp	r3, #9
 8001f08:	f040 80a6 	bne.w	8002058 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	334d      	adds	r3, #77	; 0x4d
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3344      	adds	r3, #68	; 0x44
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4403      	add	r3, r0
 8001f40:	3344      	adds	r3, #68	; 0x44
 8001f42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3344      	adds	r3, #68	; 0x44
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d943      	bls.n	8001fe2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3344      	adds	r3, #68	; 0x44
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	331a      	adds	r3, #26
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d123      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	331b      	adds	r3, #27
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	331c      	adds	r3, #28
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	0151      	lsls	r1, r2, #5
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	334c      	adds	r3, #76	; 0x4c
 8001fdc:	2204      	movs	r2, #4
 8001fde:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001fe0:	e229      	b.n	8002436 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	334c      	adds	r3, #76	; 0x4c
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3326      	adds	r3, #38	; 0x26
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3326      	adds	r3, #38	; 0x26
 800201c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800201e:	2b02      	cmp	r3, #2
 8002020:	f040 8209 	bne.w	8002436 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800203a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002042:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002056:	e1ee      	b.n	8002436 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	334d      	adds	r3, #77	; 0x4d
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b05      	cmp	r3, #5
 800206c:	f040 80c8 	bne.w	8002200 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	334d      	adds	r3, #77	; 0x4d
 8002080:	2202      	movs	r2, #2
 8002082:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	331b      	adds	r3, #27
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	f040 81ce 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	3326      	adds	r3, #38	; 0x26
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d16b      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3348      	adds	r3, #72	; 0x48
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c59      	adds	r1, r3, #1
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4403      	add	r3, r0
 80020d2:	3348      	adds	r3, #72	; 0x48
 80020d4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3348      	adds	r3, #72	; 0x48
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d943      	bls.n	8002174 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3348      	adds	r3, #72	; 0x48
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	331b      	adds	r3, #27
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3344      	adds	r3, #68	; 0x44
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d809      	bhi.n	800213e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	331c      	adds	r3, #28
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	0151      	lsls	r1, r2, #5
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	440a      	add	r2, r1
 8002154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334c      	adds	r3, #76	; 0x4c
 800216e:	2204      	movs	r2, #4
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e014      	b.n	800219e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	334c      	adds	r3, #76	; 0x4c
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e009      	b.n	800219e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	334c      	adds	r3, #76	; 0x4c
 800219a:	2202      	movs	r2, #2
 800219c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3326      	adds	r3, #38	; 0x26
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3326      	adds	r3, #38	; 0x26
 80021c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	f040 8136 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e11b      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	334d      	adds	r3, #77	; 0x4d
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b03      	cmp	r3, #3
 8002214:	f040 8081 	bne.w	800231a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	334d      	adds	r3, #77	; 0x4d
 8002228:	2202      	movs	r2, #2
 800222a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	331b      	adds	r3, #27
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	f040 80fa 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	334c      	adds	r3, #76	; 0x4c
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	0151      	lsls	r1, r2, #5
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	440a      	add	r2, r1
 800226e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	0151      	lsls	r1, r2, #5
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	440a      	add	r2, r1
 800228e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002296:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	0151      	lsls	r1, r2, #5
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	440a      	add	r2, r1
 80022ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b2:	f023 0320 	bic.w	r3, r3, #32
 80022b6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3326      	adds	r3, #38	; 0x26
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3326      	adds	r3, #38	; 0x26
 80022de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	f040 80a9 	bne.w	8002438 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002304:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	e08e      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	334d      	adds	r3, #77	; 0x4d
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d143      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	334d      	adds	r3, #77	; 0x4d
 8002340:	2202      	movs	r2, #2
 8002342:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	334c      	adds	r3, #76	; 0x4c
 8002354:	2202      	movs	r2, #2
 8002356:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3326      	adds	r3, #38	; 0x26
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3326      	adds	r3, #38	; 0x26
 800237e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002380:	2b02      	cmp	r3, #2
 8002382:	d159      	bne.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800239a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e03f      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	334d      	adds	r3, #77	; 0x4d
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d126      	bne.n	800241c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	334d      	adds	r3, #77	; 0x4d
 80023de:	2202      	movs	r2, #2
 80023e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3344      	adds	r3, #68	; 0x44
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	1c59      	adds	r1, r3, #1
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4403      	add	r3, r0
 8002402:	3344      	adds	r3, #68	; 0x44
 8002404:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	334c      	adds	r3, #76	; 0x4c
 8002416:	2204      	movs	r2, #4
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e00d      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	334d      	adds	r3, #77	; 0x4d
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	f000 8100 	beq.w	8002634 <HCD_HC_IN_IRQHandler+0xcca>
 8002434:	e000      	b.n	8002438 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002436:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	334c      	adds	r3, #76	; 0x4c
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	4619      	mov	r1, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f002 fb7f 	bl	8004b52 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002454:	e0ef      	b.n	8002636 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f002 f87f 	bl	8004562 <USB_ReadChInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d12f      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	2340      	movs	r3, #64	; 0x40
 800247e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	334d      	adds	r3, #77	; 0x4d
 8002490:	2205      	movs	r2, #5
 8002492:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	331a      	adds	r3, #26
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3344      	adds	r3, #68	; 0x44
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 f8c8 	bl	800465c <USB_HC_Halt>
 80024cc:	e0b3      	b.n	8002636 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 f843 	bl	8004562 <USB_ReadChInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	f040 80a7 	bne.w	8002636 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3326      	adds	r3, #38	; 0x26
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d11b      	bne.n	8002536 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3344      	adds	r3, #68	; 0x44
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	334d      	adds	r3, #77	; 0x4d
 8002522:	2204      	movs	r2, #4
 8002524:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f002 f894 	bl	800465c <USB_HC_Halt>
 8002534:	e03f      	b.n	80025b6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	3326      	adds	r3, #38	; 0x26
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3326      	adds	r3, #38	; 0x26
 800255c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800255e:	2b02      	cmp	r3, #2
 8002560:	d129      	bne.n	80025b6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3344      	adds	r3, #68	; 0x44
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	799b      	ldrb	r3, [r3, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HCD_HC_IN_IRQHandler+0xc2a>
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	331b      	adds	r3, #27
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d110      	bne.n	80025b6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	334d      	adds	r3, #77	; 0x4d
 80025a4:	2204      	movs	r2, #4
 80025a6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 f853 	bl	800465c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	331b      	adds	r3, #27
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d129      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	331b      	adds	r3, #27
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	0151      	lsls	r1, r2, #5
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	440a      	add	r2, r1
 80025f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	0151      	lsls	r1, r2, #5
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	440a      	add	r2, r1
 8002616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261a:	f043 0320 	orr.w	r3, r3, #32
 800261e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	461a      	mov	r2, r3
 800262e:	2310      	movs	r3, #16
 8002630:	6093      	str	r3, [r2, #8]
 8002632:	e000      	b.n	8002636 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002634:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 ff81 	bl	8004562 <USB_ReadChInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d11b      	bne.n	80026a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	461a      	mov	r2, r3
 8002678:	2304      	movs	r3, #4
 800267a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	334d      	adds	r3, #77	; 0x4d
 800268c:	2207      	movs	r2, #7
 800268e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f001 ffdf 	bl	800465c <USB_HC_Halt>
 800269e:	f000 bc6f 	b.w	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 ff59 	bl	8004562 <USB_ReadChInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	f040 8082 	bne.w	80027c0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	2320      	movs	r3, #32
 80026cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3319      	adds	r3, #25
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d124      	bne.n	800272e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3319      	adds	r3, #25
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334c      	adds	r3, #76	; 0x4c
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	334d      	adds	r3, #77	; 0x4d
 800271c:	2203      	movs	r2, #3
 800271e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f001 ff97 	bl	800465c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	331a      	adds	r3, #26
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	f040 841d 	bne.w	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	331b      	adds	r3, #27
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 8411 	bne.w	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3326      	adds	r3, #38	; 0x26
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d009      	beq.n	8002788 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	331b      	adds	r3, #27
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334d      	adds	r3, #77	; 0x4d
 8002798:	2203      	movs	r2, #3
 800279a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 ff59 	bl	800465c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	3344      	adds	r3, #68	; 0x44
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e3df      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 feca 	bl	8004562 <USB_ReadChInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d8:	d111      	bne.n	80027fe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 ff30 	bl	800465c <USB_HC_Halt>
 80027fc:	e3c0      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f001 feab 	bl	8004562 <USB_ReadChInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d168      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3344      	adds	r3, #68	; 0x44
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fe95 	bl	8004562 <USB_ReadChInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d112      	bne.n	8002868 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3319      	adds	r3, #25
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2340      	movs	r3, #64	; 0x40
 8002866:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	331b      	adds	r3, #27
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d019      	beq.n	80028b2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	331b      	adds	r3, #27
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	461a      	mov	r2, r3
 80028c0:	2301      	movs	r3, #1
 80028c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	334d      	adds	r3, #77	; 0x4d
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 febb 	bl	800465c <USB_HC_Halt>
 80028e6:	e34b      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fe36 	bl	8004562 <USB_ReadChInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d139      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334d      	adds	r3, #77	; 0x4d
 8002910:	2205      	movs	r2, #5
 8002912:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	331a      	adds	r3, #26
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3319      	adds	r3, #25
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3344      	adds	r3, #68	; 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f001 fe7e 	bl	800465c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	461a      	mov	r2, r3
 800296e:	2340      	movs	r3, #64	; 0x40
 8002970:	6093      	str	r3, [r2, #8]
 8002972:	e305      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f001 fdf0 	bl	8004562 <USB_ReadChInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11a      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	461a      	mov	r2, r3
 800299a:	2308      	movs	r3, #8
 800299c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	334d      	adds	r3, #77	; 0x4d
 80029ae:	2206      	movs	r2, #6
 80029b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 fe4e 	bl	800465c <USB_HC_Halt>
 80029c0:	e2de      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fdc9 	bl	8004562 <USB_ReadChInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d144      	bne.n	8002a64 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3344      	adds	r3, #68	; 0x44
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	334d      	adds	r3, #77	; 0x4d
 80029fe:	2204      	movs	r2, #4
 8002a00:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3319      	adds	r3, #25
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d114      	bne.n	8002a42 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3318      	adds	r3, #24
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3319      	adds	r3, #25
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 fe06 	bl	800465c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2310      	movs	r3, #16
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	e28d      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 fd78 	bl	8004562 <USB_ReadChInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d169      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	799b      	ldrb	r3, [r3, #6]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d111      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	334d      	adds	r3, #77	; 0x4d
 8002a94:	2207      	movs	r2, #7
 8002a96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 fddb 	bl	800465c <USB_HC_Halt>
 8002aa6:	e049      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3344      	adds	r3, #68	; 0x44
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c59      	adds	r1, r3, #1
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4403      	add	r3, r0
 8002ac8:	3344      	adds	r3, #68	; 0x44
 8002aca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3344      	adds	r3, #68	; 0x44
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d922      	bls.n	8002b28 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3344      	adds	r3, #68	; 0x44
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	334c      	adds	r3, #76	; 0x4c
 8002b06:	2204      	movs	r2, #4
 8002b08:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	334c      	adds	r3, #76	; 0x4c
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f002 f816 	bl	8004b52 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b26:	e009      	b.n	8002b3c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334c      	adds	r3, #76	; 0x4c
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	6093      	str	r3, [r2, #8]
 8002b4e:	e217      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 fd02 	bl	8004562 <USB_ReadChInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d11b      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	334d      	adds	r3, #77	; 0x4d
 8002b7a:	2209      	movs	r2, #9
 8002b7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fd68 	bl	800465c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	e1ee      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 fcd9 	bl	8004562 <USB_ReadChInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	f040 81df 	bne.w	8002f7a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2302      	movs	r3, #2
 8002bcc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	334d      	adds	r3, #77	; 0x4d
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8093 	bne.w	8002d0c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	334d      	adds	r3, #77	; 0x4d
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	334c      	adds	r3, #76	; 0x4c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3326      	adds	r3, #38	; 0x26
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d00b      	beq.n	8002c3c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3326      	adds	r3, #38	; 0x26
 8002c34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	f040 8190 	bne.w	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	799b      	ldrb	r3, [r3, #6]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d115      	bne.n	8002c70 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	333d      	adds	r3, #61	; 0x3d
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2d8      	uxtb	r0, r3
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	333d      	adds	r3, #61	; 0x3d
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	799b      	ldrb	r3, [r3, #6]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 8171 	bne.w	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3334      	adds	r3, #52	; 0x34
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8165 	beq.w	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3334      	adds	r3, #52	; 0x34
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4403      	add	r3, r0
 8002cb2:	3328      	adds	r3, #40	; 0x28
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	440b      	add	r3, r1
 8002cb8:	1e59      	subs	r1, r3, #1
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4403      	add	r3, r0
 8002cc8:	3328      	adds	r3, #40	; 0x28
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 813f 	beq.w	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	333d      	adds	r3, #61	; 0x3d
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	f083 0301 	eor.w	r3, r3, #1
 8002cf6:	b2d8      	uxtb	r0, r3
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	333d      	adds	r3, #61	; 0x3d
 8002d06:	4602      	mov	r2, r0
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e127      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	334d      	adds	r3, #77	; 0x4d
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d120      	bne.n	8002d64 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	334d      	adds	r3, #77	; 0x4d
 8002d32:	2202      	movs	r2, #2
 8002d34:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	331b      	adds	r3, #27
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 8107 	bne.w	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	334c      	adds	r3, #76	; 0x4c
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e0fb      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	334d      	adds	r3, #77	; 0x4d
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d13a      	bne.n	8002df0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	334d      	adds	r3, #77	; 0x4d
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	334c      	adds	r3, #76	; 0x4c
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	331b      	adds	r3, #27
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 80d1 	bne.w	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	331b      	adds	r3, #27
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	0151      	lsls	r1, r2, #5
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	440a      	add	r2, r1
 8002de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dec:	6053      	str	r3, [r2, #4]
 8002dee:	e0b5      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334d      	adds	r3, #77	; 0x4d
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d114      	bne.n	8002e30 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	334d      	adds	r3, #77	; 0x4d
 8002e16:	2202      	movs	r2, #2
 8002e18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	334c      	adds	r3, #76	; 0x4c
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e095      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	334d      	adds	r3, #77	; 0x4d
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d114      	bne.n	8002e70 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	334d      	adds	r3, #77	; 0x4d
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	334c      	adds	r3, #76	; 0x4c
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e075      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	334d      	adds	r3, #77	; 0x4d
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b07      	cmp	r3, #7
 8002e84:	d00a      	beq.n	8002e9c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	334d      	adds	r3, #77	; 0x4d
 8002e96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d170      	bne.n	8002f7e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	334d      	adds	r3, #77	; 0x4d
 8002eac:	2202      	movs	r2, #2
 8002eae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3344      	adds	r3, #68	; 0x44
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4403      	add	r3, r0
 8002ed0:	3344      	adds	r3, #68	; 0x44
 8002ed2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3344      	adds	r3, #68	; 0x44
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d914      	bls.n	8002f14 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3344      	adds	r3, #68	; 0x44
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334c      	adds	r3, #76	; 0x4c
 8002f0e:	2204      	movs	r2, #4
 8002f10:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f12:	e022      	b.n	8002f5a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	334c      	adds	r3, #76	; 0x4c
 8002f24:	2202      	movs	r2, #2
 8002f26:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f3e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f46:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f5a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334c      	adds	r3, #76	; 0x4c
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 fded 	bl	8004b52 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f78:	e002      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002f7e:	bf00      	nop
  }
}
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b08a      	sub	sp, #40	; 0x28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	0c5b      	lsrs	r3, r3, #17
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d004      	beq.n	8002fcc <HCD_RXQLVL_IRQHandler+0x46>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	f000 80b6 	beq.w	8003136 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fca:	e0b7      	b.n	800313c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80b3 	beq.w	800313a <HCD_RXQLVL_IRQHandler+0x1b4>
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	332c      	adds	r3, #44	; 0x2c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80a7 	beq.w	800313a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3338      	adds	r3, #56	; 0x38
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	18d1      	adds	r1, r2, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4403      	add	r3, r0
 8003010:	3334      	adds	r3, #52	; 0x34
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4299      	cmp	r1, r3
 8003016:	f200 8083 	bhi.w	8003120 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	332c      	adds	r3, #44	; 0x2c
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	b292      	uxth	r2, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f001 fa29 	bl	800448c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	332c      	adds	r3, #44	; 0x2c
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	18d1      	adds	r1, r2, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4403      	add	r3, r0
 800305e:	332c      	adds	r3, #44	; 0x2c
 8003060:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3338      	adds	r3, #56	; 0x38
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	18d1      	adds	r1, r2, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4403      	add	r3, r0
 8003086:	3338      	adds	r3, #56	; 0x38
 8003088:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	0cdb      	lsrs	r3, r3, #19
 800309a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3328      	adds	r3, #40	; 0x28
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d13f      	bne.n	800313a <HCD_RXQLVL_IRQHandler+0x1b4>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d03c      	beq.n	800313a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030de:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	333c      	adds	r3, #60	; 0x3c
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2d8      	uxtb	r0, r3
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	333c      	adds	r3, #60	; 0x3c
 800311a:	4602      	mov	r2, r0
 800311c:	701a      	strb	r2, [r3, #0]
      break;
 800311e:	e00c      	b.n	800313a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	334c      	adds	r3, #76	; 0x4c
 8003130:	2204      	movs	r2, #4
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e001      	b.n	800313a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800313a:	bf00      	nop
  }
}
 800313c:	bf00      	nop
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003170:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d10b      	bne.n	8003194 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f001 fcc7 	bl	8004b1a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b08      	cmp	r3, #8
 800319c:	d132      	bne.n	8003204 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d126      	bne.n	80031fe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7a5b      	ldrb	r3, [r3, #9]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d113      	bne.n	80031e0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031c2:	d106      	bne.n	80031d2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 f9f8 	bl	80045c0 <USB_InitFSLSPClkSel>
 80031d0:	e011      	b.n	80031f6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f9f1 	bl	80045c0 <USB_InitFSLSPClkSel>
 80031de:	e00a      	b.n	80031f6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	79db      	ldrb	r3, [r3, #7]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ee:	461a      	mov	r2, r3
 80031f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031f4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f001 fcb9 	bl	8004b6e <HAL_HCD_PortEnabled_Callback>
 80031fc:	e002      	b.n	8003204 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f001 fcc3 	bl	8004b8a <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d103      	bne.n	8003216 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f043 0320 	orr.w	r3, r3, #32
 8003214:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6013      	str	r3, [r2, #0]
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e267      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d075      	beq.n	8003336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800324a:	4b88      	ldr	r3, [pc, #544]	; (800346c <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b04      	cmp	r3, #4
 8003254:	d00c      	beq.n	8003270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003256:	4b85      	ldr	r3, [pc, #532]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d112      	bne.n	8003288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003262:	4b82      	ldr	r3, [pc, #520]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326e:	d10b      	bne.n	8003288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	4b7e      	ldr	r3, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05b      	beq.n	8003334 <HAL_RCC_OscConfig+0x108>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d157      	bne.n	8003334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e242      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x74>
 8003292:	4b76      	ldr	r3, [pc, #472]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a75      	ldr	r2, [pc, #468]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xb0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x98>
 80032aa:	4b70      	ldr	r3, [pc, #448]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6f      	ldr	r2, [pc, #444]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b6d      	ldr	r3, [pc, #436]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a6c      	ldr	r2, [pc, #432]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xb0>
 80032c4:	4b69      	ldr	r3, [pc, #420]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a68      	ldr	r2, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b66      	ldr	r3, [pc, #408]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a65      	ldr	r2, [pc, #404]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fd ff04 	bl	80010f0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fd ff00 	bl	80010f0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e207      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b5b      	ldr	r3, [pc, #364]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xc0>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fd fef0 	bl	80010f0 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003314:	f7fd feec 	bl	80010f0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1f3      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b51      	ldr	r3, [pc, #324]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0xe8>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d063      	beq.n	800340a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003342:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335a:	4b44      	ldr	r3, [pc, #272]	; (800346c <HAL_RCC_OscConfig+0x240>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b41      	ldr	r3, [pc, #260]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x152>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1c7      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4937      	ldr	r1, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x240>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e03a      	b.n	800340a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCC_OscConfig+0x244>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fd fea5 	bl	80010f0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fd fea1 	bl	80010f0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1a8      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4925      	ldr	r1, [pc, #148]	; (800346c <HAL_RCC_OscConfig+0x240>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_OscConfig+0x244>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fd fe84 	bl	80010f0 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ec:	f7fd fe80 	bl	80010f0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e187      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d036      	beq.n	8003484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_RCC_OscConfig+0x248>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fd fe64 	bl	80010f0 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342c:	f7fd fe60 	bl	80010f0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e167      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_OscConfig+0x240>)
 8003440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x200>
 800344a:	e01b      	b.n	8003484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_OscConfig+0x248>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003452:	f7fd fe4d 	bl	80010f0 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	e00e      	b.n	8003478 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345a:	f7fd fe49 	bl	80010f0 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d907      	bls.n	8003478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e150      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
 800346c:	40023800 	.word	0x40023800
 8003470:	42470000 	.word	0x42470000
 8003474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003478:	4b88      	ldr	r3, [pc, #544]	; (800369c <HAL_RCC_OscConfig+0x470>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ea      	bne.n	800345a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8097 	beq.w	80035c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003496:	4b81      	ldr	r3, [pc, #516]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	4b7d      	ldr	r3, [pc, #500]	; (800369c <HAL_RCC_OscConfig+0x470>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a7c      	ldr	r2, [pc, #496]	; (800369c <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b7a      	ldr	r3, [pc, #488]	; (800369c <HAL_RCC_OscConfig+0x470>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	4b77      	ldr	r3, [pc, #476]	; (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ce:	4b74      	ldr	r3, [pc, #464]	; (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a73      	ldr	r2, [pc, #460]	; (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7fd fe09 	bl	80010f0 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fd fe05 	bl	80010f0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e10c      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <HAL_RCC_OscConfig+0x474>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x2ea>
 8003508:	4b64      	ldr	r3, [pc, #400]	; (800369c <HAL_RCC_OscConfig+0x470>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a63      	ldr	r2, [pc, #396]	; (800369c <HAL_RCC_OscConfig+0x470>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	e01c      	b.n	8003550 <HAL_RCC_OscConfig+0x324>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x30c>
 800351e:	4b5f      	ldr	r3, [pc, #380]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a5e      	ldr	r2, [pc, #376]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	4b5c      	ldr	r3, [pc, #368]	; (800369c <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a5b      	ldr	r2, [pc, #364]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x324>
 8003538:	4b58      	ldr	r3, [pc, #352]	; (800369c <HAL_RCC_OscConfig+0x470>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a57      	ldr	r2, [pc, #348]	; (800369c <HAL_RCC_OscConfig+0x470>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	4b55      	ldr	r3, [pc, #340]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4a54      	ldr	r2, [pc, #336]	; (800369c <HAL_RCC_OscConfig+0x470>)
 800354a:	f023 0304 	bic.w	r3, r3, #4
 800354e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fd fdca 	bl	80010f0 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fd fdc6 	bl	80010f0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	; 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0cb      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	4b49      	ldr	r3, [pc, #292]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0ee      	beq.n	8003560 <HAL_RCC_OscConfig+0x334>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7fd fdb4 	bl	80010f0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fd fdb0 	bl	80010f0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0b5      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a2:	4b3e      	ldr	r3, [pc, #248]	; (800369c <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ee      	bne.n	800358c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	4a38      	ldr	r2, [pc, #224]	; (800369c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a1 	beq.w	800370c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ca:	4b34      	ldr	r3, [pc, #208]	; (800369c <HAL_RCC_OscConfig+0x470>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d05c      	beq.n	8003690 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d141      	bne.n	8003662 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCC_OscConfig+0x478>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd fd84 	bl	80010f0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fd fd80 	bl	80010f0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e087      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	3b01      	subs	r3, #1
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	491b      	ldr	r1, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x478>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363a:	f7fd fd59 	bl	80010f0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003642:	f7fd fd55 	bl	80010f0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e05c      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x416>
 8003660:	e054      	b.n	800370c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_RCC_OscConfig+0x478>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fd fd42 	bl	80010f0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fd3e 	bl	80010f0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e045      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_OscConfig+0x470>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x444>
 800368e:	e03d      	b.n	800370c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e038      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
 800369c:	40023800 	.word	0x40023800
 80036a0:	40007000 	.word	0x40007000
 80036a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x4ec>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d028      	beq.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d121      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d11a      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d111      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	3b01      	subs	r3, #1
 80036f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800

0800371c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0cc      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b68      	ldr	r3, [pc, #416]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d90c      	bls.n	8003758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d044      	beq.n	800383c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d119      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d003      	beq.n	80037da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e067      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4934      	ldr	r1, [pc, #208]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800380c:	f7fd fc70 	bl	80010f0 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	e00a      	b.n	800382a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7fd fc6c 	bl	80010f0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e04f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 020c 	and.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	429a      	cmp	r2, r3
 800383a:	d1eb      	bne.n	8003814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d20c      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fbd0 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08005e94 	.word	0x08005e94
 80038e0:	20000050 	.word	0x20000050
 80038e4:	20000054 	.word	0x20000054

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b094      	sub	sp, #80	; 0x50
 80038ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	647b      	str	r3, [r7, #68]	; 0x44
 80038f4:	2300      	movs	r3, #0
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f8:	2300      	movs	r3, #0
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003900:	4b79      	ldr	r3, [pc, #484]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d00d      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x40>
 800390c:	2b08      	cmp	r3, #8
 800390e:	f200 80e1 	bhi.w	8003ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x3a>
 800391a:	e0db      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b73      	ldr	r3, [pc, #460]	; (8003aec <HAL_RCC_GetSysClockFreq+0x204>)
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003920:	e0db      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003922:	4b73      	ldr	r3, [pc, #460]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003926:	e0d8      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4b6f      	ldr	r3, [pc, #444]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003932:	4b6d      	ldr	r3, [pc, #436]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d063      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	2200      	movs	r2, #0
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
 8003948:	63fa      	str	r2, [r7, #60]	; 0x3c
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
 8003956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	0159      	lsls	r1, r3, #5
 8003968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396c:	0150      	lsls	r0, r2, #5
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4621      	mov	r1, r4
 8003974:	1a51      	subs	r1, r2, r1
 8003976:	6139      	str	r1, [r7, #16]
 8003978:	4629      	mov	r1, r5
 800397a:	eb63 0301 	sbc.w	r3, r3, r1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800398c:	4659      	mov	r1, fp
 800398e:	018b      	lsls	r3, r1, #6
 8003990:	4651      	mov	r1, sl
 8003992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003996:	4651      	mov	r1, sl
 8003998:	018a      	lsls	r2, r1, #6
 800399a:	4651      	mov	r1, sl
 800399c:	ebb2 0801 	subs.w	r8, r2, r1
 80039a0:	4659      	mov	r1, fp
 80039a2:	eb63 0901 	sbc.w	r9, r3, r1
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ba:	4690      	mov	r8, r2
 80039bc:	4699      	mov	r9, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	eb18 0303 	adds.w	r3, r8, r3
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	462b      	mov	r3, r5
 80039c8:	eb49 0303 	adc.w	r3, r9, r3
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039da:	4629      	mov	r1, r5
 80039dc:	024b      	lsls	r3, r1, #9
 80039de:	4621      	mov	r1, r4
 80039e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e4:	4621      	mov	r1, r4
 80039e6:	024a      	lsls	r2, r1, #9
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ee:	2200      	movs	r2, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f8:	f7fc fc42 	bl	8000280 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	e058      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	4611      	mov	r1, r2
 8003a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	0159      	lsls	r1, r3, #5
 8003a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a32:	0150      	lsls	r0, r2, #5
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a3e:	4649      	mov	r1, r9
 8003a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a58:	ebb2 040a 	subs.w	r4, r2, sl
 8003a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	00eb      	lsls	r3, r5, #3
 8003a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6e:	00e2      	lsls	r2, r4, #3
 8003a70:	4614      	mov	r4, r2
 8003a72:	461d      	mov	r5, r3
 8003a74:	4643      	mov	r3, r8
 8003a76:	18e3      	adds	r3, r4, r3
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb45 0303 	adc.w	r3, r5, r3
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	028b      	lsls	r3, r1, #10
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a98:	4621      	mov	r1, r4
 8003a9a:	028a      	lsls	r2, r1, #10
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	61fa      	str	r2, [r7, #28]
 8003aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aac:	f7fc fbe8 	bl	8000280 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3750      	adds	r7, #80	; 0x50
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000050 	.word	0x20000050

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0a9b      	lsrs	r3, r3, #10
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4903      	ldr	r1, [pc, #12]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08005ea4 	.word	0x08005ea4

08003b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b38:	f7ff ffdc 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0b5b      	lsrs	r3, r3, #13
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	08005ea4 	.word	0x08005ea4

08003b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e042      	b.n	8003bf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f83a 	bl	8003bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f97d 	bl	8003ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d175      	bne.n	8003d1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_UART_Transmit+0x2c>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e06e      	b.n	8003d1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2221      	movs	r2, #33	; 0x21
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c4e:	f7fd fa4f 	bl	80010f0 <HAL_GetTick>
 8003c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	88fa      	ldrh	r2, [r7, #6]
 8003c5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d108      	bne.n	8003c7c <HAL_UART_Transmit+0x6c>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e003      	b.n	8003c84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c84:	e02e      	b.n	8003ce4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f848 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e03a      	b.n	8003d1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10b      	bne.n	8003cc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e007      	b.n	8003cd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1cb      	bne.n	8003c86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2140      	movs	r1, #64	; 0x40
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f814 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e006      	b.n	8003d1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	e03b      	b.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d037      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7fd f9d6 	bl	80010f0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	6a3a      	ldr	r2, [r7, #32]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03a      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d023      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d020      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d01d      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d116      	bne.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f81d 	bl	8003dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2208      	movs	r2, #8
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e00f      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d0b4      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b095      	sub	sp, #84	; 0x54
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e00:	643a      	str	r2, [r7, #64]	; 0x40
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3314      	adds	r3, #20
 8003e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3314      	adds	r3, #20
 8003e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e5      	bne.n	8003e14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d119      	bne.n	8003e84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	330c      	adds	r3, #12
 8003e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f023 0310 	bic.w	r3, r3, #16
 8003e66:	647b      	str	r3, [r7, #68]	; 0x44
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e70:	61ba      	str	r2, [r7, #24]
 8003e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6979      	ldr	r1, [r7, #20]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e92:	bf00      	nop
 8003e94:	3754      	adds	r7, #84	; 0x54
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea4:	b0c0      	sub	sp, #256	; 0x100
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	68d9      	ldr	r1, [r3, #12]
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	ea40 0301 	orr.w	r3, r0, r1
 8003ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ef8:	f021 010c 	bic.w	r1, r1, #12
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f06:	430b      	orrs	r3, r1
 8003f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	6999      	ldr	r1, [r3, #24]
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	ea40 0301 	orr.w	r3, r0, r1
 8003f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b8f      	ldr	r3, [pc, #572]	; (800416c <UART_SetConfig+0x2cc>)
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d005      	beq.n	8003f40 <UART_SetConfig+0xa0>
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b8d      	ldr	r3, [pc, #564]	; (8004170 <UART_SetConfig+0x2d0>)
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d104      	bne.n	8003f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f40:	f7ff fdf8 	bl	8003b34 <HAL_RCC_GetPCLK2Freq>
 8003f44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f48:	e003      	b.n	8003f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f4a:	f7ff fddf 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8003f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	f040 810c 	bne.w	8004178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	1891      	adds	r1, r2, r2
 8003f78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f82:	4621      	mov	r1, r4
 8003f84:	eb12 0801 	adds.w	r8, r2, r1
 8003f88:	4629      	mov	r1, r5
 8003f8a:	eb43 0901 	adc.w	r9, r3, r1
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa2:	4690      	mov	r8, r2
 8003fa4:	4699      	mov	r9, r3
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	eb18 0303 	adds.w	r3, r8, r3
 8003fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	eb49 0303 	adc.w	r3, r9, r3
 8003fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fce:	460b      	mov	r3, r1
 8003fd0:	18db      	adds	r3, r3, r3
 8003fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	eb42 0303 	adc.w	r3, r2, r3
 8003fda:	657b      	str	r3, [r7, #84]	; 0x54
 8003fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fe4:	f7fc f94c 	bl	8000280 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4b61      	ldr	r3, [pc, #388]	; (8004174 <UART_SetConfig+0x2d4>)
 8003fee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	011c      	lsls	r4, r3, #4
 8003ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004000:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004008:	4642      	mov	r2, r8
 800400a:	464b      	mov	r3, r9
 800400c:	1891      	adds	r1, r2, r2
 800400e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004010:	415b      	adcs	r3, r3
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004018:	4641      	mov	r1, r8
 800401a:	eb12 0a01 	adds.w	sl, r2, r1
 800401e:	4649      	mov	r1, r9
 8004020:	eb43 0b01 	adc.w	fp, r3, r1
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004038:	4692      	mov	sl, r2
 800403a:	469b      	mov	fp, r3
 800403c:	4643      	mov	r3, r8
 800403e:	eb1a 0303 	adds.w	r3, sl, r3
 8004042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004046:	464b      	mov	r3, r9
 8004048:	eb4b 0303 	adc.w	r3, fp, r3
 800404c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800405c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004064:	460b      	mov	r3, r1
 8004066:	18db      	adds	r3, r3, r3
 8004068:	643b      	str	r3, [r7, #64]	; 0x40
 800406a:	4613      	mov	r3, r2
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	647b      	str	r3, [r7, #68]	; 0x44
 8004072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800407a:	f7fc f901 	bl	8000280 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4611      	mov	r1, r2
 8004084:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <UART_SetConfig+0x2d4>)
 8004086:	fba3 2301 	umull	r2, r3, r3, r1
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2264      	movs	r2, #100	; 0x64
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	1acb      	subs	r3, r1, r3
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <UART_SetConfig+0x2d4>)
 800409c:	fba3 2302 	umull	r2, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040a8:	441c      	add	r4, r3
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	1891      	adds	r1, r2, r2
 80040c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040c4:	415b      	adcs	r3, r3
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040cc:	4641      	mov	r1, r8
 80040ce:	1851      	adds	r1, r2, r1
 80040d0:	6339      	str	r1, [r7, #48]	; 0x30
 80040d2:	4649      	mov	r1, r9
 80040d4:	414b      	adcs	r3, r1
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040e4:	4659      	mov	r1, fp
 80040e6:	00cb      	lsls	r3, r1, #3
 80040e8:	4651      	mov	r1, sl
 80040ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ee:	4651      	mov	r1, sl
 80040f0:	00ca      	lsls	r2, r1, #3
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	4642      	mov	r2, r8
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004100:	464b      	mov	r3, r9
 8004102:	460a      	mov	r2, r1
 8004104:	eb42 0303 	adc.w	r3, r2, r3
 8004108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004118:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800411c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004120:	460b      	mov	r3, r1
 8004122:	18db      	adds	r3, r3, r3
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	4613      	mov	r3, r2
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004136:	f7fc f8a3 	bl	8000280 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <UART_SetConfig+0x2d4>)
 8004140:	fba3 1302 	umull	r1, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	2164      	movs	r1, #100	; 0x64
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	3332      	adds	r3, #50	; 0x32
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <UART_SetConfig+0x2d4>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	f003 0207 	and.w	r2, r3, #7
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4422      	add	r2, r4
 8004166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004168:	e106      	b.n	8004378 <UART_SetConfig+0x4d8>
 800416a:	bf00      	nop
 800416c:	40011000 	.word	0x40011000
 8004170:	40011400 	.word	0x40011400
 8004174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004182:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800418a:	4642      	mov	r2, r8
 800418c:	464b      	mov	r3, r9
 800418e:	1891      	adds	r1, r2, r2
 8004190:	6239      	str	r1, [r7, #32]
 8004192:	415b      	adcs	r3, r3
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800419a:	4641      	mov	r1, r8
 800419c:	1854      	adds	r4, r2, r1
 800419e:	4649      	mov	r1, r9
 80041a0:	eb43 0501 	adc.w	r5, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	00eb      	lsls	r3, r5, #3
 80041ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b2:	00e2      	lsls	r2, r4, #3
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	4643      	mov	r3, r8
 80041ba:	18e3      	adds	r3, r4, r3
 80041bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c0:	464b      	mov	r3, r9
 80041c2:	eb45 0303 	adc.w	r3, r5, r3
 80041c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041e6:	4629      	mov	r1, r5
 80041e8:	008b      	lsls	r3, r1, #2
 80041ea:	4621      	mov	r1, r4
 80041ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f0:	4621      	mov	r1, r4
 80041f2:	008a      	lsls	r2, r1, #2
 80041f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041f8:	f7fc f842 	bl	8000280 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4b60      	ldr	r3, [pc, #384]	; (8004384 <UART_SetConfig+0x4e4>)
 8004202:	fba3 2302 	umull	r2, r3, r3, r2
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	011c      	lsls	r4, r3, #4
 800420a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	1891      	adds	r1, r2, r2
 8004222:	61b9      	str	r1, [r7, #24]
 8004224:	415b      	adcs	r3, r3
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800422c:	4641      	mov	r1, r8
 800422e:	1851      	adds	r1, r2, r1
 8004230:	6139      	str	r1, [r7, #16]
 8004232:	4649      	mov	r1, r9
 8004234:	414b      	adcs	r3, r1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004244:	4659      	mov	r1, fp
 8004246:	00cb      	lsls	r3, r1, #3
 8004248:	4651      	mov	r1, sl
 800424a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800424e:	4651      	mov	r1, sl
 8004250:	00ca      	lsls	r2, r1, #3
 8004252:	4610      	mov	r0, r2
 8004254:	4619      	mov	r1, r3
 8004256:	4603      	mov	r3, r0
 8004258:	4642      	mov	r2, r8
 800425a:	189b      	adds	r3, r3, r2
 800425c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004260:	464b      	mov	r3, r9
 8004262:	460a      	mov	r2, r1
 8004264:	eb42 0303 	adc.w	r3, r2, r3
 8004268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	67bb      	str	r3, [r7, #120]	; 0x78
 8004276:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004284:	4649      	mov	r1, r9
 8004286:	008b      	lsls	r3, r1, #2
 8004288:	4641      	mov	r1, r8
 800428a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428e:	4641      	mov	r1, r8
 8004290:	008a      	lsls	r2, r1, #2
 8004292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004296:	f7fb fff3 	bl	8000280 <__aeabi_uldivmod>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <UART_SetConfig+0x4e4>)
 80042a2:	fba3 2301 	umull	r2, r3, r3, r1
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2264      	movs	r2, #100	; 0x64
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	1acb      	subs	r3, r1, r3
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	3332      	adds	r3, #50	; 0x32
 80042b4:	4a33      	ldr	r2, [pc, #204]	; (8004384 <UART_SetConfig+0x4e4>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c0:	441c      	add	r4, r3
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	673b      	str	r3, [r7, #112]	; 0x70
 80042ca:	677a      	str	r2, [r7, #116]	; 0x74
 80042cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	415b      	adcs	r3, r3
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e0:	4641      	mov	r1, r8
 80042e2:	1851      	adds	r1, r2, r1
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	4649      	mov	r1, r9
 80042e8:	414b      	adcs	r3, r1
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042f8:	4659      	mov	r1, fp
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004302:	4651      	mov	r1, sl
 8004304:	00ca      	lsls	r2, r1, #3
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4603      	mov	r3, r0
 800430c:	4642      	mov	r2, r8
 800430e:	189b      	adds	r3, r3, r2
 8004310:	66bb      	str	r3, [r7, #104]	; 0x68
 8004312:	464b      	mov	r3, r9
 8004314:	460a      	mov	r2, r1
 8004316:	eb42 0303 	adc.w	r3, r2, r3
 800431a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	663b      	str	r3, [r7, #96]	; 0x60
 8004326:	667a      	str	r2, [r7, #100]	; 0x64
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004334:	4649      	mov	r1, r9
 8004336:	008b      	lsls	r3, r1, #2
 8004338:	4641      	mov	r1, r8
 800433a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433e:	4641      	mov	r1, r8
 8004340:	008a      	lsls	r2, r1, #2
 8004342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004346:	f7fb ff9b 	bl	8000280 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <UART_SetConfig+0x4e4>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	; 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	3332      	adds	r3, #50	; 0x32
 8004362:	4a08      	ldr	r2, [pc, #32]	; (8004384 <UART_SetConfig+0x4e4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	f003 020f 	and.w	r2, r3, #15
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4422      	add	r2, r4
 8004376:	609a      	str	r2, [r3, #8]
}
 8004378:	bf00      	nop
 800437a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800437e:	46bd      	mov	sp, r7
 8004380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004384:	51eb851f 	.word	0x51eb851f

08004388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 0201 	bic.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80043e6:	d901      	bls.n	80043ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e01b      	b.n	8004424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	daf2      	bge.n	80043da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	019b      	lsls	r3, r3, #6
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004410:	d901      	bls.n	8004416 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e006      	b.n	8004424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b20      	cmp	r3, #32
 8004420:	d0f0      	beq.n	8004404 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004448:	d901      	bls.n	800444e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e018      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	daf2      	bge.n	800443c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2210      	movs	r2, #16
 800445e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800446c:	d901      	bls.n	8004472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e006      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d0f0      	beq.n	8004460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800448c:	b480      	push	{r7}
 800448e:	b08b      	sub	sp, #44	; 0x2c
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	e014      	b.n	80044e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	3301      	adds	r3, #1
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	3301      	adds	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	3301      	adds	r3, #1
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	3301      	adds	r3, #1
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	3301      	adds	r3, #1
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3e6      	bcc.n	80044b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044ea:	8bfb      	ldrh	r3, [r7, #30]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01e      	beq.n	800452e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fa:	461a      	mov	r2, r3
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
 8004510:	b2da      	uxtb	r2, r3
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	701a      	strb	r2, [r3, #0]
      i++;
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	3301      	adds	r3, #1
 800451a:	623b      	str	r3, [r7, #32]
      pDest++;
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	3301      	adds	r3, #1
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004522:	8bfb      	ldrh	r3, [r7, #30]
 8004524:	3b01      	subs	r3, #1
 8004526:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004528:	8bfb      	ldrh	r3, [r7, #30]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ea      	bne.n	8004504 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004530:	4618      	mov	r0, r3
 8004532:	372c      	adds	r7, #44	; 0x2c
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004596:	68bb      	ldr	r3, [r7, #8]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0301 	and.w	r3, r3, #1
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	68f9      	ldr	r1, [r7, #12]
 80045f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004608:	461a      	mov	r2, r3
 800460a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800460e:	6053      	str	r3, [r2, #4]
 8004610:	e00c      	b.n	800462c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d107      	bne.n	8004628 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800461e:	461a      	mov	r2, r3
 8004620:	f241 7370 	movw	r3, #6000	; 0x1770
 8004624:	6053      	str	r3, [r2, #4]
 8004626:	e001      	b.n	800462c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	b29b      	uxth	r3, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0c9b      	lsrs	r3, r3, #18
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	0fdb      	lsrs	r3, r3, #31
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	0fdb      	lsrs	r3, r3, #31
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d10d      	bne.n	80046de <USB_HC_Halt+0x82>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <USB_HC_Halt+0x82>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d002      	beq.n	80046da <USB_HC_Halt+0x7e>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d101      	bne.n	80046de <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e0d8      	b.n	8004890 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <USB_HC_Halt+0x8e>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d173      	bne.n	80047d2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004708:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d14a      	bne.n	80047ac <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d133      	bne.n	800478a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	440a      	add	r2, r1
 8004738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800473c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004740:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	440a      	add	r2, r1
 8004758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800475c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004760:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	3301      	adds	r3, #1
 8004766:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476e:	d82e      	bhi.n	80047ce <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004786:	d0ec      	beq.n	8004762 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004788:	e081      	b.n	800488e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047aa:	e070      	b.n	800488e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047cc:	e05f      	b.n	800488e <USB_HC_Halt+0x232>
            break;
 80047ce:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047d0:	e05d      	b.n	800488e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d133      	bne.n	800486a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	440a      	add	r2, r1
 8004818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800481c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004820:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	0151      	lsls	r1, r2, #5
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	440a      	add	r2, r1
 8004838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800483c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004840:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	3301      	adds	r3, #1
 8004846:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484e:	d81d      	bhi.n	800488c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004866:	d0ec      	beq.n	8004842 <USB_HC_Halt+0x1e6>
 8004868:	e011      	b.n	800488e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	440a      	add	r2, r1
 8004880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e000      	b.n	800488e <USB_HC_Halt+0x232>
          break;
 800488c:	bf00      	nop
    }
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3724      	adds	r7, #36	; 0x24
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fd7a 	bl	80043aa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048b6:	2110      	movs	r1, #16
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fd87 	bl	80043cc <USB_FlushTxFifo>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fdb1 	bl	8004430 <USB_FlushRxFifo>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e01f      	b.n	800491e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004904:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	461a      	mov	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	3301      	adds	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d9dc      	bls.n	80048de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	e034      	b.n	8004994 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4413      	add	r3, r2
 8004932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004940:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004948:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004950:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	461a      	mov	r2, r3
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004970:	d80c      	bhi.n	800498c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004988:	d0ec      	beq.n	8004964 <USB_StopHost+0xc8>
 800498a:	e000      	b.n	800498e <USB_StopHost+0xf2>
        break;
 800498c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	3301      	adds	r3, #1
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d9c7      	bls.n	800492a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f04f 32ff 	mov.w	r2, #4294967295
 80049ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fce9 	bl	8004388 <USB_EnableGlobalInt>

  return ret;
 80049b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f804 	bl	80049e4 <USBH_HandleSof>
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b0b      	cmp	r3, #11
 80049f4:	d10a      	bne.n	8004a0c <USBH_HandleSof+0x28>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004a24:	bf00      	nop
}
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004a40:	bf00      	nop
}
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f883 	bl	8004ba6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	791b      	ldrb	r3, [r3, #4]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f80b 	bl	8004ac2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	795b      	ldrb	r3, [r3, #5]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f805 	bl	8004ac2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	2b0f      	cmp	r3, #15
 8004ad2:	d80d      	bhi.n	8004af0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	33e0      	adds	r3, #224	; 0xe0
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	33e0      	adds	r3, #224	; 0xe0
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff57 	bl	80049c0 <USBH_LL_IncTimer>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff8f 	bl	8004a4c <USBH_LL_Connect>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff98 	bl	8004a7a <USBH_LL_Disconnect>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff49 	bl	8004a14 <USBH_LL_PortEnabled>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff49 	bl	8004a30 <USBH_LL_PortDisabled>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fc feb7 	bl	8001930 <HAL_HCD_Stop>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f807 	bl	8004bdc <USBH_Get_USB_Status>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d817      	bhi.n	8004c20 <USBH_Get_USB_Status+0x44>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <USBH_Get_USB_Status+0x1c>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c0f 	.word	0x08004c0f
 8004c00:	08004c15 	.word	0x08004c15
 8004c04:	08004c1b 	.word	0x08004c1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8004c0c:	e00b      	b.n	8004c26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	73fb      	strb	r3, [r7, #15]
    break;
 8004c12:	e008      	b.n	8004c26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
    break;
 8004c18:	e005      	b.n	8004c26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8004c1e:	e002      	b.n	8004c26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004c20:	2302      	movs	r3, #2
 8004c22:	73fb      	strb	r3, [r7, #15]
    break;
 8004c24:	bf00      	nop
  }
  return usb_status;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <sbrk_aligned>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	4e0e      	ldr	r6, [pc, #56]	; (8004c70 <sbrk_aligned+0x3c>)
 8004c38:	460c      	mov	r4, r1
 8004c3a:	6831      	ldr	r1, [r6, #0]
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	b911      	cbnz	r1, 8004c46 <sbrk_aligned+0x12>
 8004c40:	f000 f8cc 	bl	8004ddc <_sbrk_r>
 8004c44:	6030      	str	r0, [r6, #0]
 8004c46:	4621      	mov	r1, r4
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f000 f8c7 	bl	8004ddc <_sbrk_r>
 8004c4e:	1c43      	adds	r3, r0, #1
 8004c50:	d00a      	beq.n	8004c68 <sbrk_aligned+0x34>
 8004c52:	1cc4      	adds	r4, r0, #3
 8004c54:	f024 0403 	bic.w	r4, r4, #3
 8004c58:	42a0      	cmp	r0, r4
 8004c5a:	d007      	beq.n	8004c6c <sbrk_aligned+0x38>
 8004c5c:	1a21      	subs	r1, r4, r0
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f8bc 	bl	8004ddc <_sbrk_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d101      	bne.n	8004c6c <sbrk_aligned+0x38>
 8004c68:	f04f 34ff 	mov.w	r4, #4294967295
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	2000072c 	.word	0x2000072c

08004c74 <_malloc_r>:
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	1ccd      	adds	r5, r1, #3
 8004c7a:	f025 0503 	bic.w	r5, r5, #3
 8004c7e:	3508      	adds	r5, #8
 8004c80:	2d0c      	cmp	r5, #12
 8004c82:	bf38      	it	cc
 8004c84:	250c      	movcc	r5, #12
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	4607      	mov	r7, r0
 8004c8a:	db01      	blt.n	8004c90 <_malloc_r+0x1c>
 8004c8c:	42a9      	cmp	r1, r5
 8004c8e:	d905      	bls.n	8004c9c <_malloc_r+0x28>
 8004c90:	230c      	movs	r3, #12
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	2600      	movs	r6, #0
 8004c96:	4630      	mov	r0, r6
 8004c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d70 <_malloc_r+0xfc>
 8004ca0:	f000 f868 	bl	8004d74 <__malloc_lock>
 8004ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca8:	461c      	mov	r4, r3
 8004caa:	bb5c      	cbnz	r4, 8004d04 <_malloc_r+0x90>
 8004cac:	4629      	mov	r1, r5
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f7ff ffc0 	bl	8004c34 <sbrk_aligned>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	d155      	bne.n	8004d66 <_malloc_r+0xf2>
 8004cba:	f8d8 4000 	ldr.w	r4, [r8]
 8004cbe:	4626      	mov	r6, r4
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	d145      	bne.n	8004d50 <_malloc_r+0xdc>
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d048      	beq.n	8004d5a <_malloc_r+0xe6>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4638      	mov	r0, r7
 8004cce:	eb04 0903 	add.w	r9, r4, r3
 8004cd2:	f000 f883 	bl	8004ddc <_sbrk_r>
 8004cd6:	4581      	cmp	r9, r0
 8004cd8:	d13f      	bne.n	8004d5a <_malloc_r+0xe6>
 8004cda:	6821      	ldr	r1, [r4, #0]
 8004cdc:	1a6d      	subs	r5, r5, r1
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f7ff ffa7 	bl	8004c34 <sbrk_aligned>
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d037      	beq.n	8004d5a <_malloc_r+0xe6>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	442b      	add	r3, r5
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d038      	beq.n	8004d6a <_malloc_r+0xf6>
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	42a2      	cmp	r2, r4
 8004cfc:	d12b      	bne.n	8004d56 <_malloc_r+0xe2>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	e00f      	b.n	8004d24 <_malloc_r+0xb0>
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	1b52      	subs	r2, r2, r5
 8004d08:	d41f      	bmi.n	8004d4a <_malloc_r+0xd6>
 8004d0a:	2a0b      	cmp	r2, #11
 8004d0c:	d917      	bls.n	8004d3e <_malloc_r+0xca>
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	6025      	str	r5, [r4, #0]
 8004d14:	bf18      	it	ne
 8004d16:	6059      	strne	r1, [r3, #4]
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	bf08      	it	eq
 8004d1c:	f8c8 1000 	streq.w	r1, [r8]
 8004d20:	5162      	str	r2, [r4, r5]
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	4638      	mov	r0, r7
 8004d26:	f104 060b 	add.w	r6, r4, #11
 8004d2a:	f000 f829 	bl	8004d80 <__malloc_unlock>
 8004d2e:	f026 0607 	bic.w	r6, r6, #7
 8004d32:	1d23      	adds	r3, r4, #4
 8004d34:	1af2      	subs	r2, r6, r3
 8004d36:	d0ae      	beq.n	8004c96 <_malloc_r+0x22>
 8004d38:	1b9b      	subs	r3, r3, r6
 8004d3a:	50a3      	str	r3, [r4, r2]
 8004d3c:	e7ab      	b.n	8004c96 <_malloc_r+0x22>
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6862      	ldr	r2, [r4, #4]
 8004d42:	d1dd      	bne.n	8004d00 <_malloc_r+0x8c>
 8004d44:	f8c8 2000 	str.w	r2, [r8]
 8004d48:	e7ec      	b.n	8004d24 <_malloc_r+0xb0>
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	6864      	ldr	r4, [r4, #4]
 8004d4e:	e7ac      	b.n	8004caa <_malloc_r+0x36>
 8004d50:	4634      	mov	r4, r6
 8004d52:	6876      	ldr	r6, [r6, #4]
 8004d54:	e7b4      	b.n	8004cc0 <_malloc_r+0x4c>
 8004d56:	4613      	mov	r3, r2
 8004d58:	e7cc      	b.n	8004cf4 <_malloc_r+0x80>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f000 f80e 	bl	8004d80 <__malloc_unlock>
 8004d64:	e797      	b.n	8004c96 <_malloc_r+0x22>
 8004d66:	6025      	str	r5, [r4, #0]
 8004d68:	e7dc      	b.n	8004d24 <_malloc_r+0xb0>
 8004d6a:	605b      	str	r3, [r3, #4]
 8004d6c:	deff      	udf	#255	; 0xff
 8004d6e:	bf00      	nop
 8004d70:	20000728 	.word	0x20000728

08004d74 <__malloc_lock>:
 8004d74:	4801      	ldr	r0, [pc, #4]	; (8004d7c <__malloc_lock+0x8>)
 8004d76:	f000 b86b 	b.w	8004e50 <__retarget_lock_acquire_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	2000086c 	.word	0x2000086c

08004d80 <__malloc_unlock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <__malloc_unlock+0x8>)
 8004d82:	f000 b866 	b.w	8004e52 <__retarget_lock_release_recursive>
 8004d86:	bf00      	nop
 8004d88:	2000086c 	.word	0x2000086c

08004d8c <siprintf>:
 8004d8c:	b40e      	push	{r1, r2, r3}
 8004d8e:	b500      	push	{lr}
 8004d90:	b09c      	sub	sp, #112	; 0x70
 8004d92:	ab1d      	add	r3, sp, #116	; 0x74
 8004d94:	9002      	str	r0, [sp, #8]
 8004d96:	9006      	str	r0, [sp, #24]
 8004d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d9c:	4809      	ldr	r0, [pc, #36]	; (8004dc4 <siprintf+0x38>)
 8004d9e:	9107      	str	r1, [sp, #28]
 8004da0:	9104      	str	r1, [sp, #16]
 8004da2:	4909      	ldr	r1, [pc, #36]	; (8004dc8 <siprintf+0x3c>)
 8004da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da8:	9105      	str	r1, [sp, #20]
 8004daa:	6800      	ldr	r0, [r0, #0]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	a902      	add	r1, sp, #8
 8004db0:	f000 f8f6 	bl	8004fa0 <_svfiprintf_r>
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	b01c      	add	sp, #112	; 0x70
 8004dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc0:	b003      	add	sp, #12
 8004dc2:	4770      	bx	lr
 8004dc4:	200000a8 	.word	0x200000a8
 8004dc8:	ffff0208 	.word	0xffff0208

08004dcc <memset>:
 8004dcc:	4402      	add	r2, r0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d100      	bne.n	8004dd6 <memset+0xa>
 8004dd4:	4770      	bx	lr
 8004dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dda:	e7f9      	b.n	8004dd0 <memset+0x4>

08004ddc <_sbrk_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d06      	ldr	r5, [pc, #24]	; (8004df8 <_sbrk_r+0x1c>)
 8004de0:	2300      	movs	r3, #0
 8004de2:	4604      	mov	r4, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	602b      	str	r3, [r5, #0]
 8004de8:	f7fc f8aa 	bl	8000f40 <_sbrk>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_sbrk_r+0x1a>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_sbrk_r+0x1a>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	20000868 	.word	0x20000868

08004dfc <__errno>:
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <__errno+0x8>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	200000a8 	.word	0x200000a8

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4d0d      	ldr	r5, [pc, #52]	; (8004e40 <__libc_init_array+0x38>)
 8004e0c:	4c0d      	ldr	r4, [pc, #52]	; (8004e44 <__libc_init_array+0x3c>)
 8004e0e:	1b64      	subs	r4, r4, r5
 8004e10:	10a4      	asrs	r4, r4, #2
 8004e12:	2600      	movs	r6, #0
 8004e14:	42a6      	cmp	r6, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	4d0b      	ldr	r5, [pc, #44]	; (8004e48 <__libc_init_array+0x40>)
 8004e1a:	4c0c      	ldr	r4, [pc, #48]	; (8004e4c <__libc_init_array+0x44>)
 8004e1c:	f000 fbae 	bl	800557c <_init>
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	2600      	movs	r6, #0
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e30:	4798      	blx	r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3a:	4798      	blx	r3
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	08005ee8 	.word	0x08005ee8
 8004e44:	08005ee8 	.word	0x08005ee8
 8004e48:	08005ee8 	.word	0x08005ee8
 8004e4c:	08005eec 	.word	0x08005eec

08004e50 <__retarget_lock_acquire_recursive>:
 8004e50:	4770      	bx	lr

08004e52 <__retarget_lock_release_recursive>:
 8004e52:	4770      	bx	lr

08004e54 <_free_r>:
 8004e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d044      	beq.n	8004ee4 <_free_r+0x90>
 8004e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5e:	9001      	str	r0, [sp, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f1a1 0404 	sub.w	r4, r1, #4
 8004e66:	bfb8      	it	lt
 8004e68:	18e4      	addlt	r4, r4, r3
 8004e6a:	f7ff ff83 	bl	8004d74 <__malloc_lock>
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <_free_r+0x94>)
 8004e70:	9801      	ldr	r0, [sp, #4]
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	b933      	cbnz	r3, 8004e84 <_free_r+0x30>
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	6014      	str	r4, [r2, #0]
 8004e7a:	b003      	add	sp, #12
 8004e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e80:	f7ff bf7e 	b.w	8004d80 <__malloc_unlock>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d908      	bls.n	8004e9a <_free_r+0x46>
 8004e88:	6825      	ldr	r5, [r4, #0]
 8004e8a:	1961      	adds	r1, r4, r5
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf01      	itttt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	1949      	addeq	r1, r1, r5
 8004e96:	6021      	streq	r1, [r4, #0]
 8004e98:	e7ed      	b.n	8004e76 <_free_r+0x22>
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b10b      	cbz	r3, 8004ea4 <_free_r+0x50>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d9fa      	bls.n	8004e9a <_free_r+0x46>
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	1855      	adds	r5, r2, r1
 8004ea8:	42a5      	cmp	r5, r4
 8004eaa:	d10b      	bne.n	8004ec4 <_free_r+0x70>
 8004eac:	6824      	ldr	r4, [r4, #0]
 8004eae:	4421      	add	r1, r4
 8004eb0:	1854      	adds	r4, r2, r1
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	d1e0      	bne.n	8004e7a <_free_r+0x26>
 8004eb8:	681c      	ldr	r4, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	6053      	str	r3, [r2, #4]
 8004ebe:	440c      	add	r4, r1
 8004ec0:	6014      	str	r4, [r2, #0]
 8004ec2:	e7da      	b.n	8004e7a <_free_r+0x26>
 8004ec4:	d902      	bls.n	8004ecc <_free_r+0x78>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	6003      	str	r3, [r0, #0]
 8004eca:	e7d6      	b.n	8004e7a <_free_r+0x26>
 8004ecc:	6825      	ldr	r5, [r4, #0]
 8004ece:	1961      	adds	r1, r4, r5
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf04      	itt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	6063      	str	r3, [r4, #4]
 8004eda:	bf04      	itt	eq
 8004edc:	1949      	addeq	r1, r1, r5
 8004ede:	6021      	streq	r1, [r4, #0]
 8004ee0:	6054      	str	r4, [r2, #4]
 8004ee2:	e7ca      	b.n	8004e7a <_free_r+0x26>
 8004ee4:	b003      	add	sp, #12
 8004ee6:	bd30      	pop	{r4, r5, pc}
 8004ee8:	20000728 	.word	0x20000728

08004eec <__ssputs_r>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	688e      	ldr	r6, [r1, #8]
 8004ef2:	461f      	mov	r7, r3
 8004ef4:	42be      	cmp	r6, r7
 8004ef6:	680b      	ldr	r3, [r1, #0]
 8004ef8:	4682      	mov	sl, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	4690      	mov	r8, r2
 8004efe:	d82c      	bhi.n	8004f5a <__ssputs_r+0x6e>
 8004f00:	898a      	ldrh	r2, [r1, #12]
 8004f02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f06:	d026      	beq.n	8004f56 <__ssputs_r+0x6a>
 8004f08:	6965      	ldr	r5, [r4, #20]
 8004f0a:	6909      	ldr	r1, [r1, #16]
 8004f0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f10:	eba3 0901 	sub.w	r9, r3, r1
 8004f14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f18:	1c7b      	adds	r3, r7, #1
 8004f1a:	444b      	add	r3, r9
 8004f1c:	106d      	asrs	r5, r5, #1
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	bf38      	it	cc
 8004f22:	461d      	movcc	r5, r3
 8004f24:	0553      	lsls	r3, r2, #21
 8004f26:	d527      	bpl.n	8004f78 <__ssputs_r+0x8c>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f7ff fea3 	bl	8004c74 <_malloc_r>
 8004f2e:	4606      	mov	r6, r0
 8004f30:	b360      	cbz	r0, 8004f8c <__ssputs_r+0xa0>
 8004f32:	6921      	ldr	r1, [r4, #16]
 8004f34:	464a      	mov	r2, r9
 8004f36:	f000 fadb 	bl	80054f0 <memcpy>
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	6126      	str	r6, [r4, #16]
 8004f48:	6165      	str	r5, [r4, #20]
 8004f4a:	444e      	add	r6, r9
 8004f4c:	eba5 0509 	sub.w	r5, r5, r9
 8004f50:	6026      	str	r6, [r4, #0]
 8004f52:	60a5      	str	r5, [r4, #8]
 8004f54:	463e      	mov	r6, r7
 8004f56:	42be      	cmp	r6, r7
 8004f58:	d900      	bls.n	8004f5c <__ssputs_r+0x70>
 8004f5a:	463e      	mov	r6, r7
 8004f5c:	6820      	ldr	r0, [r4, #0]
 8004f5e:	4632      	mov	r2, r6
 8004f60:	4641      	mov	r1, r8
 8004f62:	f000 faab 	bl	80054bc <memmove>
 8004f66:	68a3      	ldr	r3, [r4, #8]
 8004f68:	1b9b      	subs	r3, r3, r6
 8004f6a:	60a3      	str	r3, [r4, #8]
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	4433      	add	r3, r6
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	2000      	movs	r0, #0
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	462a      	mov	r2, r5
 8004f7a:	f000 fac7 	bl	800550c <_realloc_r>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1e0      	bne.n	8004f46 <__ssputs_r+0x5a>
 8004f84:	6921      	ldr	r1, [r4, #16]
 8004f86:	4650      	mov	r0, sl
 8004f88:	f7ff ff64 	bl	8004e54 <_free_r>
 8004f8c:	230c      	movs	r3, #12
 8004f8e:	f8ca 3000 	str.w	r3, [sl]
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f98:	81a3      	strh	r3, [r4, #12]
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	e7e9      	b.n	8004f74 <__ssputs_r+0x88>

08004fa0 <_svfiprintf_r>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	4698      	mov	r8, r3
 8004fa6:	898b      	ldrh	r3, [r1, #12]
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	b09d      	sub	sp, #116	; 0x74
 8004fac:	4607      	mov	r7, r0
 8004fae:	460d      	mov	r5, r1
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	d50e      	bpl.n	8004fd2 <_svfiprintf_r+0x32>
 8004fb4:	690b      	ldr	r3, [r1, #16]
 8004fb6:	b963      	cbnz	r3, 8004fd2 <_svfiprintf_r+0x32>
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	f7ff fe5b 	bl	8004c74 <_malloc_r>
 8004fbe:	6028      	str	r0, [r5, #0]
 8004fc0:	6128      	str	r0, [r5, #16]
 8004fc2:	b920      	cbnz	r0, 8004fce <_svfiprintf_r+0x2e>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	e0d0      	b.n	8005170 <_svfiprintf_r+0x1d0>
 8004fce:	2340      	movs	r3, #64	; 0x40
 8004fd0:	616b      	str	r3, [r5, #20]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fe0:	2330      	movs	r3, #48	; 0x30
 8004fe2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005188 <_svfiprintf_r+0x1e8>
 8004fe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fea:	f04f 0901 	mov.w	r9, #1
 8004fee:	4623      	mov	r3, r4
 8004ff0:	469a      	mov	sl, r3
 8004ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ff6:	b10a      	cbz	r2, 8004ffc <_svfiprintf_r+0x5c>
 8004ff8:	2a25      	cmp	r2, #37	; 0x25
 8004ffa:	d1f9      	bne.n	8004ff0 <_svfiprintf_r+0x50>
 8004ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8005000:	d00b      	beq.n	800501a <_svfiprintf_r+0x7a>
 8005002:	465b      	mov	r3, fp
 8005004:	4622      	mov	r2, r4
 8005006:	4629      	mov	r1, r5
 8005008:	4638      	mov	r0, r7
 800500a:	f7ff ff6f 	bl	8004eec <__ssputs_r>
 800500e:	3001      	adds	r0, #1
 8005010:	f000 80a9 	beq.w	8005166 <_svfiprintf_r+0x1c6>
 8005014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005016:	445a      	add	r2, fp
 8005018:	9209      	str	r2, [sp, #36]	; 0x24
 800501a:	f89a 3000 	ldrb.w	r3, [sl]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80a1 	beq.w	8005166 <_svfiprintf_r+0x1c6>
 8005024:	2300      	movs	r3, #0
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800502e:	f10a 0a01 	add.w	sl, sl, #1
 8005032:	9304      	str	r3, [sp, #16]
 8005034:	9307      	str	r3, [sp, #28]
 8005036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800503a:	931a      	str	r3, [sp, #104]	; 0x68
 800503c:	4654      	mov	r4, sl
 800503e:	2205      	movs	r2, #5
 8005040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005044:	4850      	ldr	r0, [pc, #320]	; (8005188 <_svfiprintf_r+0x1e8>)
 8005046:	f7fb f8cb 	bl	80001e0 <memchr>
 800504a:	9a04      	ldr	r2, [sp, #16]
 800504c:	b9d8      	cbnz	r0, 8005086 <_svfiprintf_r+0xe6>
 800504e:	06d0      	lsls	r0, r2, #27
 8005050:	bf44      	itt	mi
 8005052:	2320      	movmi	r3, #32
 8005054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005058:	0711      	lsls	r1, r2, #28
 800505a:	bf44      	itt	mi
 800505c:	232b      	movmi	r3, #43	; 0x2b
 800505e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b2a      	cmp	r3, #42	; 0x2a
 8005068:	d015      	beq.n	8005096 <_svfiprintf_r+0xf6>
 800506a:	9a07      	ldr	r2, [sp, #28]
 800506c:	4654      	mov	r4, sl
 800506e:	2000      	movs	r0, #0
 8005070:	f04f 0c0a 	mov.w	ip, #10
 8005074:	4621      	mov	r1, r4
 8005076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800507a:	3b30      	subs	r3, #48	; 0x30
 800507c:	2b09      	cmp	r3, #9
 800507e:	d94d      	bls.n	800511c <_svfiprintf_r+0x17c>
 8005080:	b1b0      	cbz	r0, 80050b0 <_svfiprintf_r+0x110>
 8005082:	9207      	str	r2, [sp, #28]
 8005084:	e014      	b.n	80050b0 <_svfiprintf_r+0x110>
 8005086:	eba0 0308 	sub.w	r3, r0, r8
 800508a:	fa09 f303 	lsl.w	r3, r9, r3
 800508e:	4313      	orrs	r3, r2
 8005090:	9304      	str	r3, [sp, #16]
 8005092:	46a2      	mov	sl, r4
 8005094:	e7d2      	b.n	800503c <_svfiprintf_r+0x9c>
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	9103      	str	r1, [sp, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bfbb      	ittet	lt
 80050a2:	425b      	neglt	r3, r3
 80050a4:	f042 0202 	orrlt.w	r2, r2, #2
 80050a8:	9307      	strge	r3, [sp, #28]
 80050aa:	9307      	strlt	r3, [sp, #28]
 80050ac:	bfb8      	it	lt
 80050ae:	9204      	strlt	r2, [sp, #16]
 80050b0:	7823      	ldrb	r3, [r4, #0]
 80050b2:	2b2e      	cmp	r3, #46	; 0x2e
 80050b4:	d10c      	bne.n	80050d0 <_svfiprintf_r+0x130>
 80050b6:	7863      	ldrb	r3, [r4, #1]
 80050b8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ba:	d134      	bne.n	8005126 <_svfiprintf_r+0x186>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	1d1a      	adds	r2, r3, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	9203      	str	r2, [sp, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bfb8      	it	lt
 80050c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80050cc:	3402      	adds	r4, #2
 80050ce:	9305      	str	r3, [sp, #20]
 80050d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005198 <_svfiprintf_r+0x1f8>
 80050d4:	7821      	ldrb	r1, [r4, #0]
 80050d6:	2203      	movs	r2, #3
 80050d8:	4650      	mov	r0, sl
 80050da:	f7fb f881 	bl	80001e0 <memchr>
 80050de:	b138      	cbz	r0, 80050f0 <_svfiprintf_r+0x150>
 80050e0:	9b04      	ldr	r3, [sp, #16]
 80050e2:	eba0 000a 	sub.w	r0, r0, sl
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	4082      	lsls	r2, r0
 80050ea:	4313      	orrs	r3, r2
 80050ec:	3401      	adds	r4, #1
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f4:	4825      	ldr	r0, [pc, #148]	; (800518c <_svfiprintf_r+0x1ec>)
 80050f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050fa:	2206      	movs	r2, #6
 80050fc:	f7fb f870 	bl	80001e0 <memchr>
 8005100:	2800      	cmp	r0, #0
 8005102:	d038      	beq.n	8005176 <_svfiprintf_r+0x1d6>
 8005104:	4b22      	ldr	r3, [pc, #136]	; (8005190 <_svfiprintf_r+0x1f0>)
 8005106:	bb1b      	cbnz	r3, 8005150 <_svfiprintf_r+0x1b0>
 8005108:	9b03      	ldr	r3, [sp, #12]
 800510a:	3307      	adds	r3, #7
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	3308      	adds	r3, #8
 8005112:	9303      	str	r3, [sp, #12]
 8005114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005116:	4433      	add	r3, r6
 8005118:	9309      	str	r3, [sp, #36]	; 0x24
 800511a:	e768      	b.n	8004fee <_svfiprintf_r+0x4e>
 800511c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005120:	460c      	mov	r4, r1
 8005122:	2001      	movs	r0, #1
 8005124:	e7a6      	b.n	8005074 <_svfiprintf_r+0xd4>
 8005126:	2300      	movs	r3, #0
 8005128:	3401      	adds	r4, #1
 800512a:	9305      	str	r3, [sp, #20]
 800512c:	4619      	mov	r1, r3
 800512e:	f04f 0c0a 	mov.w	ip, #10
 8005132:	4620      	mov	r0, r4
 8005134:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005138:	3a30      	subs	r2, #48	; 0x30
 800513a:	2a09      	cmp	r2, #9
 800513c:	d903      	bls.n	8005146 <_svfiprintf_r+0x1a6>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0c6      	beq.n	80050d0 <_svfiprintf_r+0x130>
 8005142:	9105      	str	r1, [sp, #20]
 8005144:	e7c4      	b.n	80050d0 <_svfiprintf_r+0x130>
 8005146:	fb0c 2101 	mla	r1, ip, r1, r2
 800514a:	4604      	mov	r4, r0
 800514c:	2301      	movs	r3, #1
 800514e:	e7f0      	b.n	8005132 <_svfiprintf_r+0x192>
 8005150:	ab03      	add	r3, sp, #12
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	462a      	mov	r2, r5
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <_svfiprintf_r+0x1f4>)
 8005158:	a904      	add	r1, sp, #16
 800515a:	4638      	mov	r0, r7
 800515c:	f3af 8000 	nop.w
 8005160:	1c42      	adds	r2, r0, #1
 8005162:	4606      	mov	r6, r0
 8005164:	d1d6      	bne.n	8005114 <_svfiprintf_r+0x174>
 8005166:	89ab      	ldrh	r3, [r5, #12]
 8005168:	065b      	lsls	r3, r3, #25
 800516a:	f53f af2d 	bmi.w	8004fc8 <_svfiprintf_r+0x28>
 800516e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005170:	b01d      	add	sp, #116	; 0x74
 8005172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005176:	ab03      	add	r3, sp, #12
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	462a      	mov	r2, r5
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <_svfiprintf_r+0x1f4>)
 800517e:	a904      	add	r1, sp, #16
 8005180:	4638      	mov	r0, r7
 8005182:	f000 f879 	bl	8005278 <_printf_i>
 8005186:	e7eb      	b.n	8005160 <_svfiprintf_r+0x1c0>
 8005188:	08005eac 	.word	0x08005eac
 800518c:	08005eb6 	.word	0x08005eb6
 8005190:	00000000 	.word	0x00000000
 8005194:	08004eed 	.word	0x08004eed
 8005198:	08005eb2 	.word	0x08005eb2

0800519c <_printf_common>:
 800519c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a0:	4616      	mov	r6, r2
 80051a2:	4699      	mov	r9, r3
 80051a4:	688a      	ldr	r2, [r1, #8]
 80051a6:	690b      	ldr	r3, [r1, #16]
 80051a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	bfb8      	it	lt
 80051b0:	4613      	movlt	r3, r2
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051b8:	4607      	mov	r7, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	b10a      	cbz	r2, 80051c2 <_printf_common+0x26>
 80051be:	3301      	adds	r3, #1
 80051c0:	6033      	str	r3, [r6, #0]
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	0699      	lsls	r1, r3, #26
 80051c6:	bf42      	ittt	mi
 80051c8:	6833      	ldrmi	r3, [r6, #0]
 80051ca:	3302      	addmi	r3, #2
 80051cc:	6033      	strmi	r3, [r6, #0]
 80051ce:	6825      	ldr	r5, [r4, #0]
 80051d0:	f015 0506 	ands.w	r5, r5, #6
 80051d4:	d106      	bne.n	80051e4 <_printf_common+0x48>
 80051d6:	f104 0a19 	add.w	sl, r4, #25
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	6832      	ldr	r2, [r6, #0]
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dc26      	bgt.n	8005232 <_printf_common+0x96>
 80051e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051e8:	1e13      	subs	r3, r2, #0
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	bf18      	it	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	0692      	lsls	r2, r2, #26
 80051f2:	d42b      	bmi.n	800524c <_printf_common+0xb0>
 80051f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f8:	4649      	mov	r1, r9
 80051fa:	4638      	mov	r0, r7
 80051fc:	47c0      	blx	r8
 80051fe:	3001      	adds	r0, #1
 8005200:	d01e      	beq.n	8005240 <_printf_common+0xa4>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	2b04      	cmp	r3, #4
 800520c:	bf02      	ittt	eq
 800520e:	68e5      	ldreq	r5, [r4, #12]
 8005210:	6833      	ldreq	r3, [r6, #0]
 8005212:	1aed      	subeq	r5, r5, r3
 8005214:	68a3      	ldr	r3, [r4, #8]
 8005216:	bf0c      	ite	eq
 8005218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800521c:	2500      	movne	r5, #0
 800521e:	4293      	cmp	r3, r2
 8005220:	bfc4      	itt	gt
 8005222:	1a9b      	subgt	r3, r3, r2
 8005224:	18ed      	addgt	r5, r5, r3
 8005226:	2600      	movs	r6, #0
 8005228:	341a      	adds	r4, #26
 800522a:	42b5      	cmp	r5, r6
 800522c:	d11a      	bne.n	8005264 <_printf_common+0xc8>
 800522e:	2000      	movs	r0, #0
 8005230:	e008      	b.n	8005244 <_printf_common+0xa8>
 8005232:	2301      	movs	r3, #1
 8005234:	4652      	mov	r2, sl
 8005236:	4649      	mov	r1, r9
 8005238:	4638      	mov	r0, r7
 800523a:	47c0      	blx	r8
 800523c:	3001      	adds	r0, #1
 800523e:	d103      	bne.n	8005248 <_printf_common+0xac>
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005248:	3501      	adds	r5, #1
 800524a:	e7c6      	b.n	80051da <_printf_common+0x3e>
 800524c:	18e1      	adds	r1, r4, r3
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	2030      	movs	r0, #48	; 0x30
 8005252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005256:	4422      	add	r2, r4
 8005258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800525c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005260:	3302      	adds	r3, #2
 8005262:	e7c7      	b.n	80051f4 <_printf_common+0x58>
 8005264:	2301      	movs	r3, #1
 8005266:	4622      	mov	r2, r4
 8005268:	4649      	mov	r1, r9
 800526a:	4638      	mov	r0, r7
 800526c:	47c0      	blx	r8
 800526e:	3001      	adds	r0, #1
 8005270:	d0e6      	beq.n	8005240 <_printf_common+0xa4>
 8005272:	3601      	adds	r6, #1
 8005274:	e7d9      	b.n	800522a <_printf_common+0x8e>
	...

08005278 <_printf_i>:
 8005278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	7e0f      	ldrb	r7, [r1, #24]
 800527e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005280:	2f78      	cmp	r7, #120	; 0x78
 8005282:	4691      	mov	r9, r2
 8005284:	4680      	mov	r8, r0
 8005286:	460c      	mov	r4, r1
 8005288:	469a      	mov	sl, r3
 800528a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800528e:	d807      	bhi.n	80052a0 <_printf_i+0x28>
 8005290:	2f62      	cmp	r7, #98	; 0x62
 8005292:	d80a      	bhi.n	80052aa <_printf_i+0x32>
 8005294:	2f00      	cmp	r7, #0
 8005296:	f000 80d4 	beq.w	8005442 <_printf_i+0x1ca>
 800529a:	2f58      	cmp	r7, #88	; 0x58
 800529c:	f000 80c0 	beq.w	8005420 <_printf_i+0x1a8>
 80052a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052a8:	e03a      	b.n	8005320 <_printf_i+0xa8>
 80052aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052ae:	2b15      	cmp	r3, #21
 80052b0:	d8f6      	bhi.n	80052a0 <_printf_i+0x28>
 80052b2:	a101      	add	r1, pc, #4	; (adr r1, 80052b8 <_printf_i+0x40>)
 80052b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052b8:	08005311 	.word	0x08005311
 80052bc:	08005325 	.word	0x08005325
 80052c0:	080052a1 	.word	0x080052a1
 80052c4:	080052a1 	.word	0x080052a1
 80052c8:	080052a1 	.word	0x080052a1
 80052cc:	080052a1 	.word	0x080052a1
 80052d0:	08005325 	.word	0x08005325
 80052d4:	080052a1 	.word	0x080052a1
 80052d8:	080052a1 	.word	0x080052a1
 80052dc:	080052a1 	.word	0x080052a1
 80052e0:	080052a1 	.word	0x080052a1
 80052e4:	08005429 	.word	0x08005429
 80052e8:	08005351 	.word	0x08005351
 80052ec:	080053e3 	.word	0x080053e3
 80052f0:	080052a1 	.word	0x080052a1
 80052f4:	080052a1 	.word	0x080052a1
 80052f8:	0800544b 	.word	0x0800544b
 80052fc:	080052a1 	.word	0x080052a1
 8005300:	08005351 	.word	0x08005351
 8005304:	080052a1 	.word	0x080052a1
 8005308:	080052a1 	.word	0x080052a1
 800530c:	080053eb 	.word	0x080053eb
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	1d1a      	adds	r2, r3, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	602a      	str	r2, [r5, #0]
 8005318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800531c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005320:	2301      	movs	r3, #1
 8005322:	e09f      	b.n	8005464 <_printf_i+0x1ec>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	0607      	lsls	r7, r0, #24
 800532a:	f103 0104 	add.w	r1, r3, #4
 800532e:	6029      	str	r1, [r5, #0]
 8005330:	d501      	bpl.n	8005336 <_printf_i+0xbe>
 8005332:	681e      	ldr	r6, [r3, #0]
 8005334:	e003      	b.n	800533e <_printf_i+0xc6>
 8005336:	0646      	lsls	r6, r0, #25
 8005338:	d5fb      	bpl.n	8005332 <_printf_i+0xba>
 800533a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800533e:	2e00      	cmp	r6, #0
 8005340:	da03      	bge.n	800534a <_printf_i+0xd2>
 8005342:	232d      	movs	r3, #45	; 0x2d
 8005344:	4276      	negs	r6, r6
 8005346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800534a:	485a      	ldr	r0, [pc, #360]	; (80054b4 <_printf_i+0x23c>)
 800534c:	230a      	movs	r3, #10
 800534e:	e012      	b.n	8005376 <_printf_i+0xfe>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	1d19      	adds	r1, r3, #4
 8005356:	6029      	str	r1, [r5, #0]
 8005358:	0605      	lsls	r5, r0, #24
 800535a:	d501      	bpl.n	8005360 <_printf_i+0xe8>
 800535c:	681e      	ldr	r6, [r3, #0]
 800535e:	e002      	b.n	8005366 <_printf_i+0xee>
 8005360:	0641      	lsls	r1, r0, #25
 8005362:	d5fb      	bpl.n	800535c <_printf_i+0xe4>
 8005364:	881e      	ldrh	r6, [r3, #0]
 8005366:	4853      	ldr	r0, [pc, #332]	; (80054b4 <_printf_i+0x23c>)
 8005368:	2f6f      	cmp	r7, #111	; 0x6f
 800536a:	bf0c      	ite	eq
 800536c:	2308      	moveq	r3, #8
 800536e:	230a      	movne	r3, #10
 8005370:	2100      	movs	r1, #0
 8005372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005376:	6865      	ldr	r5, [r4, #4]
 8005378:	60a5      	str	r5, [r4, #8]
 800537a:	2d00      	cmp	r5, #0
 800537c:	bfa2      	ittt	ge
 800537e:	6821      	ldrge	r1, [r4, #0]
 8005380:	f021 0104 	bicge.w	r1, r1, #4
 8005384:	6021      	strge	r1, [r4, #0]
 8005386:	b90e      	cbnz	r6, 800538c <_printf_i+0x114>
 8005388:	2d00      	cmp	r5, #0
 800538a:	d04b      	beq.n	8005424 <_printf_i+0x1ac>
 800538c:	4615      	mov	r5, r2
 800538e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005392:	fb03 6711 	mls	r7, r3, r1, r6
 8005396:	5dc7      	ldrb	r7, [r0, r7]
 8005398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800539c:	4637      	mov	r7, r6
 800539e:	42bb      	cmp	r3, r7
 80053a0:	460e      	mov	r6, r1
 80053a2:	d9f4      	bls.n	800538e <_printf_i+0x116>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d10b      	bne.n	80053c0 <_printf_i+0x148>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	07de      	lsls	r6, r3, #31
 80053ac:	d508      	bpl.n	80053c0 <_printf_i+0x148>
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	6861      	ldr	r1, [r4, #4]
 80053b2:	4299      	cmp	r1, r3
 80053b4:	bfde      	ittt	le
 80053b6:	2330      	movle	r3, #48	; 0x30
 80053b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053c0:	1b52      	subs	r2, r2, r5
 80053c2:	6122      	str	r2, [r4, #16]
 80053c4:	f8cd a000 	str.w	sl, [sp]
 80053c8:	464b      	mov	r3, r9
 80053ca:	aa03      	add	r2, sp, #12
 80053cc:	4621      	mov	r1, r4
 80053ce:	4640      	mov	r0, r8
 80053d0:	f7ff fee4 	bl	800519c <_printf_common>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d14a      	bne.n	800546e <_printf_i+0x1f6>
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	b004      	add	sp, #16
 80053de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f043 0320 	orr.w	r3, r3, #32
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	4833      	ldr	r0, [pc, #204]	; (80054b8 <_printf_i+0x240>)
 80053ec:	2778      	movs	r7, #120	; 0x78
 80053ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	6829      	ldr	r1, [r5, #0]
 80053f6:	061f      	lsls	r7, r3, #24
 80053f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053fc:	d402      	bmi.n	8005404 <_printf_i+0x18c>
 80053fe:	065f      	lsls	r7, r3, #25
 8005400:	bf48      	it	mi
 8005402:	b2b6      	uxthmi	r6, r6
 8005404:	07df      	lsls	r7, r3, #31
 8005406:	bf48      	it	mi
 8005408:	f043 0320 	orrmi.w	r3, r3, #32
 800540c:	6029      	str	r1, [r5, #0]
 800540e:	bf48      	it	mi
 8005410:	6023      	strmi	r3, [r4, #0]
 8005412:	b91e      	cbnz	r6, 800541c <_printf_i+0x1a4>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	f023 0320 	bic.w	r3, r3, #32
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	2310      	movs	r3, #16
 800541e:	e7a7      	b.n	8005370 <_printf_i+0xf8>
 8005420:	4824      	ldr	r0, [pc, #144]	; (80054b4 <_printf_i+0x23c>)
 8005422:	e7e4      	b.n	80053ee <_printf_i+0x176>
 8005424:	4615      	mov	r5, r2
 8005426:	e7bd      	b.n	80053a4 <_printf_i+0x12c>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	6826      	ldr	r6, [r4, #0]
 800542c:	6961      	ldr	r1, [r4, #20]
 800542e:	1d18      	adds	r0, r3, #4
 8005430:	6028      	str	r0, [r5, #0]
 8005432:	0635      	lsls	r5, r6, #24
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	d501      	bpl.n	800543c <_printf_i+0x1c4>
 8005438:	6019      	str	r1, [r3, #0]
 800543a:	e002      	b.n	8005442 <_printf_i+0x1ca>
 800543c:	0670      	lsls	r0, r6, #25
 800543e:	d5fb      	bpl.n	8005438 <_printf_i+0x1c0>
 8005440:	8019      	strh	r1, [r3, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	4615      	mov	r5, r2
 8005448:	e7bc      	b.n	80053c4 <_printf_i+0x14c>
 800544a:	682b      	ldr	r3, [r5, #0]
 800544c:	1d1a      	adds	r2, r3, #4
 800544e:	602a      	str	r2, [r5, #0]
 8005450:	681d      	ldr	r5, [r3, #0]
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	2100      	movs	r1, #0
 8005456:	4628      	mov	r0, r5
 8005458:	f7fa fec2 	bl	80001e0 <memchr>
 800545c:	b108      	cbz	r0, 8005462 <_printf_i+0x1ea>
 800545e:	1b40      	subs	r0, r0, r5
 8005460:	6060      	str	r0, [r4, #4]
 8005462:	6863      	ldr	r3, [r4, #4]
 8005464:	6123      	str	r3, [r4, #16]
 8005466:	2300      	movs	r3, #0
 8005468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800546c:	e7aa      	b.n	80053c4 <_printf_i+0x14c>
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	462a      	mov	r2, r5
 8005472:	4649      	mov	r1, r9
 8005474:	4640      	mov	r0, r8
 8005476:	47d0      	blx	sl
 8005478:	3001      	adds	r0, #1
 800547a:	d0ad      	beq.n	80053d8 <_printf_i+0x160>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	079b      	lsls	r3, r3, #30
 8005480:	d413      	bmi.n	80054aa <_printf_i+0x232>
 8005482:	68e0      	ldr	r0, [r4, #12]
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	4298      	cmp	r0, r3
 8005488:	bfb8      	it	lt
 800548a:	4618      	movlt	r0, r3
 800548c:	e7a6      	b.n	80053dc <_printf_i+0x164>
 800548e:	2301      	movs	r3, #1
 8005490:	4632      	mov	r2, r6
 8005492:	4649      	mov	r1, r9
 8005494:	4640      	mov	r0, r8
 8005496:	47d0      	blx	sl
 8005498:	3001      	adds	r0, #1
 800549a:	d09d      	beq.n	80053d8 <_printf_i+0x160>
 800549c:	3501      	adds	r5, #1
 800549e:	68e3      	ldr	r3, [r4, #12]
 80054a0:	9903      	ldr	r1, [sp, #12]
 80054a2:	1a5b      	subs	r3, r3, r1
 80054a4:	42ab      	cmp	r3, r5
 80054a6:	dcf2      	bgt.n	800548e <_printf_i+0x216>
 80054a8:	e7eb      	b.n	8005482 <_printf_i+0x20a>
 80054aa:	2500      	movs	r5, #0
 80054ac:	f104 0619 	add.w	r6, r4, #25
 80054b0:	e7f5      	b.n	800549e <_printf_i+0x226>
 80054b2:	bf00      	nop
 80054b4:	08005ebd 	.word	0x08005ebd
 80054b8:	08005ece 	.word	0x08005ece

080054bc <memmove>:
 80054bc:	4288      	cmp	r0, r1
 80054be:	b510      	push	{r4, lr}
 80054c0:	eb01 0402 	add.w	r4, r1, r2
 80054c4:	d902      	bls.n	80054cc <memmove+0x10>
 80054c6:	4284      	cmp	r4, r0
 80054c8:	4623      	mov	r3, r4
 80054ca:	d807      	bhi.n	80054dc <memmove+0x20>
 80054cc:	1e43      	subs	r3, r0, #1
 80054ce:	42a1      	cmp	r1, r4
 80054d0:	d008      	beq.n	80054e4 <memmove+0x28>
 80054d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054da:	e7f8      	b.n	80054ce <memmove+0x12>
 80054dc:	4402      	add	r2, r0
 80054de:	4601      	mov	r1, r0
 80054e0:	428a      	cmp	r2, r1
 80054e2:	d100      	bne.n	80054e6 <memmove+0x2a>
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ee:	e7f7      	b.n	80054e0 <memmove+0x24>

080054f0 <memcpy>:
 80054f0:	440a      	add	r2, r1
 80054f2:	4291      	cmp	r1, r2
 80054f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f8:	d100      	bne.n	80054fc <memcpy+0xc>
 80054fa:	4770      	bx	lr
 80054fc:	b510      	push	{r4, lr}
 80054fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005506:	4291      	cmp	r1, r2
 8005508:	d1f9      	bne.n	80054fe <memcpy+0xe>
 800550a:	bd10      	pop	{r4, pc}

0800550c <_realloc_r>:
 800550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005510:	4680      	mov	r8, r0
 8005512:	4614      	mov	r4, r2
 8005514:	460e      	mov	r6, r1
 8005516:	b921      	cbnz	r1, 8005522 <_realloc_r+0x16>
 8005518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800551c:	4611      	mov	r1, r2
 800551e:	f7ff bba9 	b.w	8004c74 <_malloc_r>
 8005522:	b92a      	cbnz	r2, 8005530 <_realloc_r+0x24>
 8005524:	f7ff fc96 	bl	8004e54 <_free_r>
 8005528:	4625      	mov	r5, r4
 800552a:	4628      	mov	r0, r5
 800552c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005530:	f000 f81b 	bl	800556a <_malloc_usable_size_r>
 8005534:	4284      	cmp	r4, r0
 8005536:	4607      	mov	r7, r0
 8005538:	d802      	bhi.n	8005540 <_realloc_r+0x34>
 800553a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800553e:	d812      	bhi.n	8005566 <_realloc_r+0x5a>
 8005540:	4621      	mov	r1, r4
 8005542:	4640      	mov	r0, r8
 8005544:	f7ff fb96 	bl	8004c74 <_malloc_r>
 8005548:	4605      	mov	r5, r0
 800554a:	2800      	cmp	r0, #0
 800554c:	d0ed      	beq.n	800552a <_realloc_r+0x1e>
 800554e:	42bc      	cmp	r4, r7
 8005550:	4622      	mov	r2, r4
 8005552:	4631      	mov	r1, r6
 8005554:	bf28      	it	cs
 8005556:	463a      	movcs	r2, r7
 8005558:	f7ff ffca 	bl	80054f0 <memcpy>
 800555c:	4631      	mov	r1, r6
 800555e:	4640      	mov	r0, r8
 8005560:	f7ff fc78 	bl	8004e54 <_free_r>
 8005564:	e7e1      	b.n	800552a <_realloc_r+0x1e>
 8005566:	4635      	mov	r5, r6
 8005568:	e7df      	b.n	800552a <_realloc_r+0x1e>

0800556a <_malloc_usable_size_r>:
 800556a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556e:	1f18      	subs	r0, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	bfbc      	itt	lt
 8005574:	580b      	ldrlt	r3, [r1, r0]
 8005576:	18c0      	addlt	r0, r0, r3
 8005578:	4770      	bx	lr
	...

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
